<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>mmculib: nrf2401.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.5 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>nrf2401.h</h1><a href="nrf2401_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00007"></a>00007 <span class="preprocessor">#ifndef NRF2401_H</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span><span class="preprocessor">#define NRF2401_H</span>
<a name="l00009"></a>00009 <span class="preprocessor"></span>
<a name="l00010"></a>00010 <span class="preprocessor">#include "config.h"</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include "spi.h"</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include "port.h"</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 
<a name="l00015"></a><a class="code" href="nrf2401_8h.html#b48899087cc647f0f791ed0c459adc53fd35ccf31a436ea2582dcb297b20c271">00015</a> <span class="keyword">enum</span> {<a class="code" href="nrf2401_8h.html#b48899087cc647f0f791ed0c459adc53fd35ccf31a436ea2582dcb297b20c271">NRF_DEVICE_ID_SIZE</a> = 8};
<a name="l00016"></a>00016 
<a name="l00017"></a>00017 
<a name="l00018"></a><a class="code" href="nrf2401_8h.html#8e10b4274a0de94729bbd0a8140fb7fe">00018</a> <span class="keyword">typedef</span> uint8_t <a class="code" href="nrf2401_8h.html#8e10b4274a0de94729bbd0a8140fb7fe">nrf_device_id_t</a>[<a class="code" href="nrf2401_8h.html#b48899087cc647f0f791ed0c459adc53fd35ccf31a436ea2582dcb297b20c271">NRF_DEVICE_ID_SIZE</a>];
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 
<a name="l00021"></a><a class="code" href="nrf2401_8h.html#097e289dfb18e933f587aeb5921431b0">00021</a> <span class="keyword">typedef</span> <span class="keyword">enum</span> 
<a name="l00022"></a>00022 {
<a name="l00023"></a><a class="code" href="nrf2401_8h.html#097e289dfb18e933f587aeb5921431b07c475f6ae4486f43f04b788cd3bdf3a5">00023</a>     <a class="code" href="nrf2401_8h.html#097e289dfb18e933f587aeb5921431b07c475f6ae4486f43f04b788cd3bdf3a5">NRF_BROADCAST_SLAVE_ID</a> = 0xFE, 
<a name="l00024"></a><a class="code" href="nrf2401_8h.html#097e289dfb18e933f587aeb5921431b034c612e6bdc9d2ba3a578bf8f0aaab10">00024</a>     <a class="code" href="nrf2401_8h.html#097e289dfb18e933f587aeb5921431b034c612e6bdc9d2ba3a578bf8f0aaab10">NRF_MASTER_ID</a> = 0xFF
<a name="l00025"></a>00025 } <a class="code" href="nrf2401_8h.html#097e289dfb18e933f587aeb5921431b0">nrf_id_t</a>;
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 
<a name="l00028"></a><a class="code" href="nrf2401_8h.html#bed4d74e69a85bd81906e5fc877068a9">00028</a> <span class="keyword">typedef</span> uint8_t <a class="code" href="nrf2401_8h.html#bed4d74e69a85bd81906e5fc877068a9">nrf_channel_t</a>;
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">/* Define an address to be 5 bytes (40 bits) long.  Addresses shorter</span>
<a name="l00032"></a>00032 <span class="comment">   than this are supported but provide less noise immunity.  */</span>
<a name="l00033"></a><a class="code" href="structnrf__address__t.html">00033</a> <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00034"></a>00034 {
<a name="l00035"></a><a class="code" href="structnrf__address__t.html#ae5d8a6441d02813de1af1ccdfdf4daf">00035</a>     uint8_t bytes[5];
<a name="l00036"></a>00036 } <a class="code" href="structnrf__address__t.html">nrf_address_t</a>;
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 
<a name="l00039"></a><a class="code" href="structnrf__link__t.html">00039</a> <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00040"></a>00040 {
<a name="l00041"></a><a class="code" href="structnrf__link__t.html#9f9928674f958b788e9dd2923ed93246">00041</a>     <a class="code" href="nrf2401_8h.html#097e289dfb18e933f587aeb5921431b0">nrf_id_t</a> id;
<a name="l00042"></a><a class="code" href="structnrf__link__t.html#a9bdc3c85e9bd3bcb520f0d94c40dbb0">00042</a>     <a class="code" href="structnrf__address__t.html">nrf_address_t</a> address;    
<a name="l00043"></a><a class="code" href="structnrf__link__t.html#10e44b2a48612ec1dfa0ce43c32f3895">00043</a>     <a class="code" href="nrf2401_8h.html#bed4d74e69a85bd81906e5fc877068a9">nrf_channel_t</a> channel;    
<a name="l00044"></a>00044 } <a class="code" href="structnrf__link__t.html">nrf_link_t</a>;
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00047"></a><a class="code" href="structnrf__node__t.html">00047</a> <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00048"></a>00048 {
<a name="l00049"></a><a class="code" href="structnrf__node__t.html#e7b8bf40e05c131e0522ea380110f9ea">00049</a>     <a class="code" href="structnrf__link__t.html">nrf_link_t</a> tx;
<a name="l00050"></a><a class="code" href="structnrf__node__t.html#b15d170a4fdd1890b673e652298a7f17">00050</a>     <a class="code" href="structnrf__link__t.html">nrf_link_t</a> rx;
<a name="l00051"></a>00051     <span class="comment">/* Unique identifier for enumeration.  */</span>
<a name="l00052"></a><a class="code" href="structnrf__node__t.html#1671310b39199ddb18b11f03b9d03a79">00052</a>     <a class="code" href="nrf2401_8h.html#8e10b4274a0de94729bbd0a8140fb7fe">nrf_device_id_t</a> device_id;
<a name="l00053"></a>00053 } <a class="code" href="structnrf__node__t.html">nrf_node_t</a>;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">/* Define a 15-byte structure to hold configuration data for the nrf2401.  */</span>
<a name="l00057"></a><a class="code" href="structnrf__config__bits__t.html">00057</a> <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00058"></a>00058 {
<a name="l00059"></a>00059     <span class="comment">/* The first 2 bytes are used for controlling both direct and</span>
<a name="l00060"></a>00060 <span class="comment">       ShockBurst modes.  */</span>
<a name="l00061"></a><a class="code" href="structnrf__config__bits__t.html#854c05fe9c8d602df4fbcb8f53669aca">00061</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rxen:1;         <span class="comment">/* RX or TX operation.  */</span>
<a name="l00062"></a><a class="code" href="structnrf__config__bits__t.html#06ccf2e47df1431ffcad0c87946f59a7">00062</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rx_ch_num:7;    <span class="comment">/* Frequency channel.  */</span>
<a name="l00063"></a><a class="code" href="structnrf__config__bits__t.html#931af1233b52d2de3210af9a693d774a">00063</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rf_pwr:2;       <span class="comment">/* NRF Output Power.  */</span>
<a name="l00064"></a><a class="code" href="structnrf__config__bits__t.html#6ab1a0df70813a03e2a8da882de23437">00064</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xo_f:3;         <span class="comment">/* Crystal Frequency.  */</span>
<a name="l00065"></a><a class="code" href="structnrf__config__bits__t.html#69ed8edc0fd106984843c43b6c12ffa9">00065</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rfdr_sb:1;      <span class="comment">/* NRF Data Rate.  */</span>
<a name="l00066"></a><a class="code" href="structnrf__config__bits__t.html#fad6dd3d6d8234e9ff1227d715ff2f6c">00066</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> cm:1;           <span class="comment">/* Communication Mode (Direct or ShockBurst.  */</span>
<a name="l00067"></a><a class="code" href="structnrf__config__bits__t.html#3852d77b88b86fd1acd154baecb9a6c2">00067</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rx2_en:1;       <span class="comment">/* Enable 2 channel receive mode.  */</span>
<a name="l00068"></a>00068     
<a name="l00069"></a>00069     <span class="comment">/* The next bytes are only used in ShockBurst Mode.  */</span>
<a name="l00070"></a><a class="code" href="structnrf__config__bits__t.html#e871d44380a8993366cb72bbada57f86">00070</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> crc_en:1;       <span class="comment">/* Enable on-chip CRC checking.  */</span>
<a name="l00071"></a><a class="code" href="structnrf__config__bits__t.html#c92bc2e054e12c9d6280b98bc329e2cf">00071</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> crc_l:1;        <span class="comment">/* Select 8- or 16-bit CRC.  */</span>
<a name="l00072"></a><a class="code" href="structnrf__config__bits__t.html#502ae4e72d50d451dfeb3ea676bad844">00072</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> addr_w:6;       <span class="comment">/* Select number of address bits (both channels) */</span>
<a name="l00073"></a>00073     
<a name="l00074"></a><a class="code" href="structnrf__config__bits__t.html#6d67ab223708c6ddd9e98123a185c5de">00074</a>     <a class="code" href="structnrf__address__t.html">nrf_address_t</a> addr_1;
<a name="l00075"></a><a class="code" href="structnrf__config__bits__t.html#97d736891f34778ce763c7c59c8fd772">00075</a>     <a class="code" href="structnrf__address__t.html">nrf_address_t</a> addr_2;
<a name="l00076"></a><a class="code" href="structnrf__config__bits__t.html#a0d3c8404b172ff4fe0c93576cbb24b6">00076</a>     uint8_t data1_w;        <span class="comment">/* Data payload length for RX Channel 1 in bits.  */</span>
<a name="l00077"></a><a class="code" href="structnrf__config__bits__t.html#0c1bd7d7e3cac550eb25a2d5f3b76bcd">00077</a>     uint8_t data2_w;        <span class="comment">/* Data payload length for RX Channel 2 in bits.  */</span>
<a name="l00078"></a>00078 } <a class="code" href="structnrf__config__bits__t.html">nrf_config_bits_t</a>;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 
<a name="l00081"></a><a class="code" href="unionnrf__config__t.html">00081</a> <span class="keyword">typedef</span> <span class="keyword">union</span>
<a name="l00082"></a>00082 {
<a name="l00083"></a><a class="code" href="unionnrf__config__t.html#cbaf6cdf51dea565175711d13527c4a2">00083</a>   uint8_t bytes[15];
<a name="l00084"></a><a class="code" href="unionnrf__config__t.html#914dcbea3e21f9a2a8d13e6d26cf9ae8">00084</a>   <a class="code" href="structnrf__config__bits__t.html">nrf_config_bits_t</a> bits;
<a name="l00085"></a>00085 } <a class="code" href="unionnrf__config__t.html">nrf_config_t</a>;
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="comment">/* This code only allows for one receive channel to be used at present.  */</span>
<a name="l00089"></a><a class="code" href="structnrf__cfg__t.html">00089</a> <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00090"></a>00090 {
<a name="l00091"></a><a class="code" href="structnrf__cfg__t.html#259bc50156c77048c233f643821f54a7">00091</a>     spi_cfg_t spi;
<a name="l00092"></a><a class="code" href="structnrf__cfg__t.html#d84f5da838c1638ccdbd0abfc9aaf704">00092</a>     port_cfg_t cs;
<a name="l00093"></a><a class="code" href="structnrf__cfg__t.html#485e38da7e59506b976e070beb174637">00093</a>     port_cfg_t ce;
<a name="l00094"></a><a class="code" href="structnrf__cfg__t.html#64ed9f1b204e8c3e768d93bb0f0aa6ba">00094</a>     port_cfg_t dr;
<a name="l00095"></a>00095 } <a class="code" href="structnrf__cfg__t.html">nrf_cfg_t</a>;
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 
<a name="l00098"></a><a class="code" href="nrf2401_8h.html#074d4fb7b23e0047807df9d57f2d8095">00098</a> <span class="preprocessor">#define NRF_CFG(CHANNEL, DIVISOR, CS_PORT, CS_BIT, CE_PORT, CE_BIT, DR_PORT, DR_BIT) {{(CHANNEL), (DIVISOR), {0, 0}}, {CS_PORT, BIT (CS_BIT)}, {CE_PORT, BIT (CE_BIT)}, {DR_PORT, BIT (DR_BIT)}}</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span>
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 <span class="comment">/* Define a structure containing the pin mappings of the device, and</span>
<a name="l00103"></a>00103 <span class="comment">   its configuration data.  Any program using this driver must</span>
<a name="l00104"></a>00104 <span class="comment">   allocate enough space for this structure.  */</span>
<a name="l00105"></a><a class="code" href="structnrf__obj__t.html">00105</a> <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00106"></a>00106 {
<a name="l00107"></a><a class="code" href="structnrf__obj__t.html#8a197bd17720bd674bd0740549204312">00107</a>     <span class="keyword">const</span> <a class="code" href="structnrf__cfg__t.html">nrf_cfg_t</a> * cfg;
<a name="l00108"></a><a class="code" href="structnrf__obj__t.html#b4250f3d6bd057f55275e4684adc8c53">00108</a>     <a class="code" href="unionnrf__config__t.html">nrf_config_t</a> config;
<a name="l00109"></a><a class="code" href="structnrf__obj__t.html#68e34d6c3812594732d7e4edce10053e">00109</a>     spi_t spi;
<a name="l00110"></a>00110 } <a class="code" href="structnrf__obj__t.html">nrf_obj_t</a>;    
<a name="l00111"></a>00111     
<a name="l00112"></a>00112 
<a name="l00113"></a><a class="code" href="nrf2401_8h.html#342adca7ac1d1f7d5c758a1929bcce86">00113</a> <span class="keyword">typedef</span> <a class="code" href="structnrf__obj__t.html">nrf_obj_t</a> *<a class="code" href="structnrf__obj__t.html">nrf_t</a>;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 <span class="comment">/* Maximum Payload = 32 - 7 = 25 bytes.  */</span>
<a name="l00117"></a><a class="code" href="nrf2401_8h.html#4ebe92e97e1063efdcbcda6af2fa3aa6">00117</a> <span class="preprocessor">#define NRF_PAYLOAD_SIZE 25</span>
<a name="l00118"></a>00118 <span class="preprocessor"></span>
<a name="l00119"></a>00119 <span class="comment">/* Definitions for some of the bit values to clarify program.  */</span>
<a name="l00120"></a><a class="code" href="nrf2401_8h.html#458e651af6690959efa2afb96be7d609ccfe80dc5a511c6fb03f97160465145c">00120</a> <span class="keyword">enum</span> {<a class="code" href="nrf2401_8h.html#458e651af6690959efa2afb96be7d609ccfe80dc5a511c6fb03f97160465145c">NRF_TX_MODE</a> = 0, <a class="code" href="nrf2401_8h.html#458e651af6690959efa2afb96be7d6096ba0978740f5af9e322dc373f461eba2">NRF_RX_MODE</a> = 1};
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 <span class="comment">/* Used to select direct or ShockBurst modes.  */</span>
<a name="l00123"></a><a class="code" href="nrf2401_8h.html#1f9aebf1de3ebbf4283a4dcf733085626a48eeeb85d144a85d5020ede000c976">00123</a> <span class="keyword">enum</span> {<a class="code" href="nrf2401_8h.html#1f9aebf1de3ebbf4283a4dcf733085628ae38849f24c8642fd44b381434942e0">NRF_DIRECT</a> = 0, <a class="code" href="nrf2401_8h.html#1f9aebf1de3ebbf4283a4dcf733085626a48eeeb85d144a85d5020ede000c976">NRF_SHOCKBURST</a> = 1};
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 <span class="comment">/* Select either 8 or 16-bit CRC.  */</span>
<a name="l00126"></a><a class="code" href="nrf2401_8h.html#77867ab4129f63159b37bca3b652a7981032c0aa859e9928e389a83f43315a94">00126</a> <span class="keyword">enum</span> {<a class="code" href="nrf2401_8h.html#77867ab4129f63159b37bca3b652a7981032c0aa859e9928e389a83f43315a94">NRF_CRC_8</a> = 0, <a class="code" href="nrf2401_8h.html#77867ab4129f63159b37bca3b652a798fd0d402ba74ee6e09930a4e165cac3f3">NRF_CRC_16</a> = 1};
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="comment">/* Enable or disable CRC checking.  */</span>
<a name="l00129"></a><a class="code" href="nrf2401_8h.html#16685eea158879e41b101ca3634de46256ed9fee9c8d71fa37d368949337a0c2">00129</a> <span class="keyword">enum</span> {<a class="code" href="nrf2401_8h.html#16685eea158879e41b101ca3634de462bb21547236a721cf34ba6f2de9bc67b7">NRF_CRC_DISABLED</a> = 0, <a class="code" href="nrf2401_8h.html#16685eea158879e41b101ca3634de46256ed9fee9c8d71fa37d368949337a0c2">NRF_CRC_ENABLED</a> = 1};
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 <span class="comment">/* The used part of the address is the first byte (0xFD), the rest is</span>
<a name="l00132"></a>00132 <span class="comment">   for noise immunity. since it has many transitions.  */</span>
<a name="l00133"></a><a class="code" href="nrf2401_8h.html#7a9c75bc2201f7d3778ead6b2738d9d4">00133</a> <span class="preprocessor">#define NRF_DEFAULT_ADDRESS {0xFD, 0xCA, 0x7E, 0xA9, 0x52}</span>
<a name="l00134"></a>00134 <span class="preprocessor"></span>
<a name="l00135"></a>00135 <span class="comment">/* NRF power levels in -dBm.  */</span>
<a name="l00136"></a><a class="code" href="nrf2401_8h.html#2970898e8a43ce21e1cc510d49f1b89da97606f5d0cc713e391bc0f5b0b19686">00136</a> <span class="keyword">enum</span> {<a class="code" href="nrf2401_8h.html#2970898e8a43ce21e1cc510d49f1b89d016eb4e94534334130a1c19162ed7f72">NRF_POWER_20</a>, <a class="code" href="nrf2401_8h.html#2970898e8a43ce21e1cc510d49f1b89d1dce1e3116fc504938d6c975a051bec8">NRF_POWER_10</a>, <a class="code" href="nrf2401_8h.html#2970898e8a43ce21e1cc510d49f1b89da97606f5d0cc713e391bc0f5b0b19686">NRF_POWER_5</a>, <a class="code" href="nrf2401_8h.html#2970898e8a43ce21e1cc510d49f1b89ddcb09b34476101ed06ae3a211b75a86d">NRF_POWER_0</a>};
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 <span class="comment">/* Single or dual channel reception mode.  */</span>
<a name="l00139"></a><a class="code" href="nrf2401_8h.html#fa231099d07583c3ed0981e0bb665f558eea14d4e7b7ec7b792b5eeb9965cade">00139</a> <span class="keyword">enum</span> {<a class="code" href="nrf2401_8h.html#fa231099d07583c3ed0981e0bb665f558eea14d4e7b7ec7b792b5eeb9965cade">NRF_SINGLE_CHANNEL</a> = 0, <a class="code" href="nrf2401_8h.html#fa231099d07583c3ed0981e0bb665f559d1d704592040e4b0033773769a641ee">NRF_DUAL_CHANNEL</a> = 1};
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 <span class="comment">/* Data rate of 250kbps or 1Mbps.  */</span>
<a name="l00142"></a><a class="code" href="nrf2401_8h.html#394b3903fbf00ba2b6243f60689a5a5fce263eb336f0f5806795d98def2998b6">00142</a> <span class="keyword">enum</span> {<a class="code" href="nrf2401_8h.html#394b3903fbf00ba2b6243f60689a5a5fce263eb336f0f5806795d98def2998b6">NRF_DATA_250K</a> = 0, <a class="code" href="nrf2401_8h.html#394b3903fbf00ba2b6243f60689a5a5f9b11145fa196f183258074481033f2a2">NRF_DATA_1M</a> = 1};
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="comment">/* Select crystal frequency - 4, 8, 12, 16 or 20 MHz.  */</span>
<a name="l00145"></a><a class="code" href="nrf2401_8h.html#c205be2172292384dd687b5471a87edd825de6e559a1d49c47a1c43647a988dc">00145</a> <span class="keyword">enum</span> {<a class="code" href="nrf2401_8h.html#c205be2172292384dd687b5471a87edde0ffcecf30849f02f25e8807b7b1bd5a">NRF_XTAL_FREQ_4M</a>, <a class="code" href="nrf2401_8h.html#c205be2172292384dd687b5471a87edd825de6e559a1d49c47a1c43647a988dc">NRF_XTAL_FREQ_8M</a>, <a class="code" href="nrf2401_8h.html#c205be2172292384dd687b5471a87edd54ae3a5edba1d664e7f0b2924f44542e">NRF_XTAL_FREQ_12M</a>, 
<a name="l00146"></a><a class="code" href="nrf2401_8h.html#c205be2172292384dd687b5471a87edd5f49386883638a921099ee823e1873a1">00146</a>       <a class="code" href="nrf2401_8h.html#c205be2172292384dd687b5471a87eddf0ffedb3610ed0207b69e7ee172fe24c">NRF_XTAL_FREQ_16M</a>, <a class="code" href="nrf2401_8h.html#c205be2172292384dd687b5471a87edd5f49386883638a921099ee823e1873a1">NRF_XTAL_FREQ_20M</a>};
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 <span class="comment">/* Define the time-out time to wait for acknowledgement of a packet in ms.  */</span>
<a name="l00149"></a><a class="code" href="nrf2401_8h.html#157d5577a5b2f5986037d0d09c7dc77dbd6d9dc42459da42d6766aaf7b1ea194">00149</a> <span class="keyword">enum</span> {<a class="code" href="nrf2401_8h.html#157d5577a5b2f5986037d0d09c7dc77dbd6d9dc42459da42d6766aaf7b1ea194">NRF_TIMEOUT_ACK_MS</a> = 10};
<a name="l00150"></a>00150 
<a name="l00151"></a>00151 
<a name="l00152"></a><a class="code" href="nrf2401_8h.html#1fb9092bcdeada2d206bdc74afbbe1225647335406a3c408ae3d184369dd7b66">00152</a> <span class="keyword">enum</span> {<a class="code" href="nrf2401_8h.html#1fb9092bcdeada2d206bdc74afbbe1225647335406a3c408ae3d184369dd7b66">NRF_ACK_DELAY_US</a> = 600};
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 <span class="comment">/* Function Prototypes.  */</span>
<a name="l00156"></a>00156 <span class="keyword">extern</span> <a class="code" href="structnrf__obj__t.html">nrf_t</a> 
<a name="l00157"></a>00157 <a class="code" href="nrf2401_8c.html#22e5c40347994667a233802f4cddb365">nrf_init</a> (<a class="code" href="structnrf__obj__t.html">nrf_obj_t</a> *dev, <span class="keyword">const</span> <a class="code" href="structnrf__cfg__t.html">nrf_cfg_t</a> *cfg);
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 <span class="keyword">extern</span> <span class="keywordtype">bool</span> 
<a name="l00161"></a>00161 <a class="code" href="nrf2401_8c.html#503158aef839b07fda9fd1a76f134126">nrf_setup</a> (<a class="code" href="structnrf__obj__t.html">nrf_t</a> nrf, uint8_t payload_size);
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00164"></a>00164 <span class="keyword">extern</span> uint8_t 
<a name="l00165"></a>00165 <a class="code" href="nrf2401_8c.html#4673ad828e6293328bd436902110b6a3">nrf_transmit</a> (<a class="code" href="structnrf__obj__t.html">nrf_t</a> nrf, <a class="code" href="structnrf__node__t.html">nrf_node_t</a> *node, <span class="keywordtype">void</span> *buffer, uint8_t len);
<a name="l00166"></a>00166 
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 <span class="keyword">extern</span> uint8_t 
<a name="l00169"></a>00169 <a class="code" href="nrf2401_8c.html#b33a22c7e34f46aa9dca322114c99fe5">nrf_receive</a> (<a class="code" href="structnrf__obj__t.html">nrf_t</a> nrf, <a class="code" href="structnrf__node__t.html">nrf_node_t</a> *node, <span class="keywordtype">void</span> *buffer, uint8_t len, 
<a name="l00170"></a>00170              uint8_t ms_to_wait);
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 <span class="keyword">extern</span> <span class="keywordtype">bool</span> 
<a name="l00174"></a>00174 <a class="code" href="nrf2401_8c.html#6a185b90791bc672c8820baa2f17ba84">nrf_data_ready_p</a> (<a class="code" href="structnrf__obj__t.html">nrf_t</a> nrf);
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Tue May 27 11:44:04 2008 for mmculib by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.5 </small></address>
</body>
</html>
