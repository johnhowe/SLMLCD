<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>mmculib: ring.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.5 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>ring.h</h1><a href="ring_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00007"></a>00007 <span class="preprocessor">#ifndef _RING_H</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span><span class="preprocessor">#define _RING_H</span>
<a name="l00009"></a>00009 <span class="preprocessor"></span>
<a name="l00010"></a>00010 <span class="preprocessor">#include "config.h"</span>
<a name="l00011"></a>00011 
<a name="l00012"></a><a class="code" href="ring_8h.html#f1370ade98f8d7f1c525801f84c449bb">00012</a> <span class="keyword">typedef</span> uint16_t <a class="code" href="ring_8h.html#f1370ade98f8d7f1c525801f84c449bb">ring_size_t</a>;
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 <span class="comment">/* Define ring buffer structure.  Unfortunately, since we need to</span>
<a name="l00016"></a>00016 <span class="comment">   statically allocate this structure we cannot make the structure</span>
<a name="l00017"></a>00017 <span class="comment">   opaque.  However, do not access the members directly.  They may</span>
<a name="l00018"></a>00018 <span class="comment">   change one day.  Note the in pointer is only modified by ring_write</span>
<a name="l00019"></a>00019 <span class="comment">   whereas the out pointer is only modified by ring_read so these</span>
<a name="l00020"></a>00020 <span class="comment">   routines can be called by an ISR without a race condition (provided</span>
<a name="l00021"></a>00021 <span class="comment">   pointer reads and writes are atomic).  */</span>
<a name="l00022"></a><a class="code" href="structring__struct.html">00022</a> <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structring__struct.html">ring_struct</a>
<a name="l00023"></a>00023 {
<a name="l00024"></a><a class="code" href="structring__struct.html#ca381eace268a005b9f8c4c7a0c466f4">00024</a>     <span class="keywordtype">char</span> *<a class="code" href="structring__struct.html#ca381eace268a005b9f8c4c7a0c466f4">in</a>;                   <span class="comment">/* Pointer to next element to write.  */</span>
<a name="l00025"></a><a class="code" href="structring__struct.html#4941f99d14e93cc17f663dccf4d783a7">00025</a>     <span class="keywordtype">char</span> *<a class="code" href="structring__struct.html#4941f99d14e93cc17f663dccf4d783a7">out</a>;                  <span class="comment">/* Pointer to next element to read.  */</span>
<a name="l00026"></a><a class="code" href="structring__struct.html#647e65f28b400c6dfd497554f7ff9bf5">00026</a>     <span class="keywordtype">char</span> *<a class="code" href="structring__struct.html#647e65f28b400c6dfd497554f7ff9bf5">top</a>;                  <span class="comment">/* Pointer to top of buffer.  */</span>
<a name="l00027"></a><a class="code" href="structring__struct.html#248695727b9be1303c511b9619855ede">00027</a>     <span class="keywordtype">char</span> *<a class="code" href="structring__struct.html#248695727b9be1303c511b9619855ede">end</a>;                  <span class="comment">/* Pointer to char after buffer end.  */</span>
<a name="l00028"></a>00028 } <a class="code" href="structring__struct.html">ring_t</a>;
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="comment">/* Return non-zero if the ring buffer is empty.  */</span>
<a name="l00033"></a>00033 <span class="keyword">extern</span> <span class="keywordtype">bool</span>
<a name="l00034"></a>00034 <a class="code" href="ring_8c.html#1eddf904385ca04bd9d66959738632cd">ring_empty_p</a> (<a class="code" href="structring__struct.html">ring_t</a> *ring);
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00042"></a>00042 <span class="keyword">extern</span> <a class="code" href="ring_8h.html#f1370ade98f8d7f1c525801f84c449bb">ring_size_t</a> 
<a name="l00043"></a>00043 <a class="code" href="ring_8c.html#92f7048ed8a1bcb6186d5fb15ee396d6">ring_read</a> (<a class="code" href="structring__struct.html">ring_t</a> *ring, <span class="keywordtype">void</span> *buffer, <a class="code" href="ring_8h.html#f1370ade98f8d7f1c525801f84c449bb">ring_size_t</a> size);
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 
<a name="l00051"></a>00051 <span class="keyword">extern</span> <a class="code" href="ring_8h.html#f1370ade98f8d7f1c525801f84c449bb">ring_size_t</a>
<a name="l00052"></a>00052 <a class="code" href="ring_8c.html#a9e5a136ec26864474b8f4f7089b3d7f">ring_write</a> (<a class="code" href="structring__struct.html">ring_t</a> *ring, <span class="keyword">const</span> <span class="keywordtype">void</span> *buffer, <a class="code" href="ring_8h.html#f1370ade98f8d7f1c525801f84c449bb">ring_size_t</a> size);
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 
<a name="l00060"></a>00060 <span class="keyword">extern</span> <a class="code" href="ring_8h.html#f1370ade98f8d7f1c525801f84c449bb">ring_size_t</a>
<a name="l00061"></a>00061 <a class="code" href="ring_8c.html#2e4c383654775d49c564646c1e9493f0">ring_init</a> (<a class="code" href="structring__struct.html">ring_t</a> *ring, <span class="keywordtype">void</span> *buffer, <a class="code" href="ring_8h.html#f1370ade98f8d7f1c525801f84c449bb">ring_size_t</a> size);
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 
<a name="l00065"></a>00065 <span class="keyword">extern</span> <a class="code" href="ring_8h.html#f1370ade98f8d7f1c525801f84c449bb">ring_size_t</a>
<a name="l00066"></a>00066 <a class="code" href="ring_8c.html#001feea492eecd20db242021ce9519a2">ring_read_num</a> (<a class="code" href="structring__struct.html">ring_t</a> *ring);
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 
<a name="l00070"></a>00070 <span class="keyword">extern</span> <a class="code" href="ring_8h.html#f1370ade98f8d7f1c525801f84c449bb">ring_size_t</a>
<a name="l00071"></a>00071 <a class="code" href="ring_8c.html#928a5a88205a17986350a33fd0eeb058">ring_write_num</a> (<a class="code" href="structring__struct.html">ring_t</a> *ring);
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00077"></a><a class="code" href="ring_8h.html#8509c6563751694a822da97718cad0d9">00077</a> <span class="preprocessor">#define RING_SIZE(RING) ((RING)-&gt;end - (RING)-&gt;top)</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span>
<a name="l00084"></a><a class="code" href="ring_8h.html#e47d520f589bfeff2972fae8052f9da7">00084</a> <span class="preprocessor">#define RING_READ_NUM(RING, TMP) \</span>
<a name="l00085"></a>00085 <span class="preprocessor">   (((TMP) = ((RING)-&gt;in - (RING)-&gt;out)) &lt; 0 \</span>
<a name="l00086"></a>00086 <span class="preprocessor">      ? (TMP) + RING_SIZE (RING) : (TMP))</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span>
<a name="l00089"></a><a class="code" href="ring_8h.html#8be435c9f1a7d368d99d0eba6517c59a">00089</a> <span class="preprocessor">#define RING_WRITE_NUM(RING, TMP) \</span>
<a name="l00090"></a>00090 <span class="preprocessor">   (RING_SIZE (RING) - RING_READ_NUM (RING, TMP) - 1)</span>
<a name="l00091"></a>00091 <span class="preprocessor"></span>
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 
<a name="l00098"></a>00098 <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="ring_8h.html#f1370ade98f8d7f1c525801f84c449bb">ring_size_t</a>
<a name="l00099"></a><a class="code" href="ring_8h.html#22039b31f4dd91ea32042d545ae6b68f">00099</a> <a class="code" href="ring_8h.html#22039b31f4dd91ea32042d545ae6b68f">ring_putc</a> (<a class="code" href="structring__struct.html">ring_t</a> *ring, <span class="keywordtype">char</span> c)
<a name="l00100"></a>00100 {
<a name="l00101"></a>00101     <span class="keywordtype">int</span> tmp;
<a name="l00102"></a>00102     <span class="keywordtype">char</span> *ptr;
<a name="l00103"></a>00103 
<a name="l00104"></a>00104     <span class="comment">/* Determine number of free entries in ring buffer</span>
<a name="l00105"></a>00105 <span class="comment">       and give up if full.  */</span>
<a name="l00106"></a>00106     <span class="keywordflow">if</span> (!<a class="code" href="ring_8h.html#8be435c9f1a7d368d99d0eba6517c59a">RING_WRITE_NUM</a> (ring, tmp))
<a name="l00107"></a>00107         <span class="keywordflow">return</span> 0;
<a name="l00108"></a>00108 
<a name="l00109"></a>00109     ptr = ring-&gt;<a class="code" href="structring__struct.html#ca381eace268a005b9f8c4c7a0c466f4">in</a>;
<a name="l00110"></a>00110     *ptr++ = c;
<a name="l00111"></a>00111     <span class="keywordflow">if</span> (ptr &gt;= ring-&gt;<a class="code" href="structring__struct.html#248695727b9be1303c511b9619855ede">end</a>)
<a name="l00112"></a>00112         ptr = ring-&gt;<a class="code" href="structring__struct.html#647e65f28b400c6dfd497554f7ff9bf5">top</a>;
<a name="l00113"></a>00113     ring-&gt;<a class="code" href="structring__struct.html#ca381eace268a005b9f8c4c7a0c466f4">in</a> = ptr;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115     <span class="keywordflow">return</span> 1;
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00122"></a>00122 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">char</span>
<a name="l00123"></a><a class="code" href="ring_8h.html#fda458f5bead079ffef4dea3f1dfce0b">00123</a> <a class="code" href="ring_8h.html#fda458f5bead079ffef4dea3f1dfce0b">ring_getc</a> (<a class="code" href="structring__struct.html">ring_t</a> *ring)
<a name="l00124"></a>00124 {
<a name="l00125"></a>00125     <span class="keywordtype">int</span> tmp;
<a name="l00126"></a>00126     <span class="keywordtype">char</span> c;
<a name="l00127"></a>00127     <span class="keywordtype">char</span> *ptr;
<a name="l00128"></a>00128 
<a name="l00129"></a>00129     <span class="comment">/* Determine number of free entries in ring buffer</span>
<a name="l00130"></a>00130 <span class="comment">       and give up if full.  */</span>
<a name="l00131"></a>00131     <span class="keywordflow">if</span> (!<a class="code" href="ring_8h.html#e47d520f589bfeff2972fae8052f9da7">RING_READ_NUM</a> (ring, tmp))
<a name="l00132"></a>00132         <span class="keywordflow">return</span> 0;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134     ptr = ring-&gt;<a class="code" href="structring__struct.html#4941f99d14e93cc17f663dccf4d783a7">out</a>;
<a name="l00135"></a>00135     c = *ptr++;
<a name="l00136"></a>00136     <span class="keywordflow">if</span> (ptr &gt;= ring-&gt;<a class="code" href="structring__struct.html#248695727b9be1303c511b9619855ede">end</a>)
<a name="l00137"></a>00137         ptr = ring-&gt;<a class="code" href="structring__struct.html#647e65f28b400c6dfd497554f7ff9bf5">top</a>;
<a name="l00138"></a>00138     ring-&gt;<a class="code" href="structring__struct.html#4941f99d14e93cc17f663dccf4d783a7">out</a> = ptr;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="keywordflow">return</span> c;
<a name="l00141"></a>00141 }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Tue May 27 11:44:04 2008 for mmculib by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.5 </small></address>
</body>
</html>
