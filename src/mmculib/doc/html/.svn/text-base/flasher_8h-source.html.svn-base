<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>mmculib: flasher.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.5 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>flasher.h</h1><a href="flasher_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00006"></a>00006 <span class="preprocessor">#ifndef FLASHER_H</span>
<a name="l00007"></a>00007 <span class="preprocessor"></span><span class="preprocessor">#define FLASHER_H</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span>
<a name="l00009"></a>00009 <span class="preprocessor">#include "config.h"</span>
<a name="l00010"></a>00010 
<a name="l00011"></a>00011 <span class="comment">/* This parameter is for internal use only.  It's purpose is to </span>
<a name="l00012"></a>00012 <span class="comment">   reduce the chances of flasher_period and flasher_duty overflow.</span>
<a name="l00013"></a>00013 <span class="comment">   It could possibly be made an additional parameter for flasher_pattern_t</span>
<a name="l00014"></a>00014 <span class="comment">   and calculated by FLASHER_PATTERN.  */</span>
<a name="l00015"></a><a class="code" href="flasher_8h.html#88fe09148dda5ab936966b8f901b1cf1">00015</a> <span class="preprocessor">#define FLASHER_PRESCALE 8</span>
<a name="l00016"></a>00016 <span class="preprocessor"></span>
<a name="l00017"></a>00017 <span class="comment">/* POLL_RATE (Hz)</span>
<a name="l00018"></a>00018 <span class="comment">   MOD_FREQ (Hz)</span>
<a name="l00019"></a>00019 <span class="comment">   MOD_DUTY (percent)</span>
<a name="l00020"></a>00020 <span class="comment">   FLASHER_PERIOD (s)      - period between flashes</span>
<a name="l00021"></a>00021 <span class="comment">   FLASHER_DUTY (percent)  - proportion of flash period that is lit</span>
<a name="l00022"></a>00022 <span class="comment">   FLASHES (integer)       - how many flashes per flash pattern</span>
<a name="l00023"></a>00023 <span class="comment">   PERIOD (s)              - how often the flash pattern repeats</span>
<a name="l00024"></a>00024 <span class="comment">*/</span>
<a name="l00025"></a>00025    
<a name="l00026"></a>00026 <span class="preprocessor">#define FLASHER_PATTERN(POLL_RATE, MOD_FREQ, MOD_DUTY, FLASHER_PERIOD,  \</span>
<a name="l00027"></a><a class="code" href="flasher_8h.html#e9dc6ac289f1d74f2bfe3f6e2c8bf56a">00027</a> <span class="preprocessor">                          FLASHER_DUTY, FLASHES, PERIOD)                \</span>
<a name="l00028"></a>00028 <span class="preprocessor">    (POLL_RATE) / (double)(MOD_FREQ) + 0.5,                             \</span>
<a name="l00029"></a>00029 <span class="preprocessor">    (POLL_RATE) * (double)(MOD_DUTY) / (MOD_FREQ) / 100.0 + 0.5,        \</span>
<a name="l00030"></a>00030 <span class="preprocessor">    (MOD_FREQ) * (FLASHER_PERIOD) / (double)FLASHER_PRESCALE + 0.5,     \</span>
<a name="l00031"></a>00031 <span class="preprocessor">    (MOD_FREQ) * (FLASHER_PERIOD) * (FLASHER_DUTY) / 100.0 / FLASHER_PRESCALE + 0.5, \</span>
<a name="l00032"></a>00032 <span class="preprocessor">    (FLASHES),                                                          \</span>
<a name="l00033"></a>00033 <span class="preprocessor">    (PERIOD) / (double)(FLASHER_PERIOD) + 0.5</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 
<a name="l00036"></a><a class="code" href="structflasher__pattern__t.html">00036</a> <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038     <span class="comment">/* This is the modulation period.  It determines the frequency</span>
<a name="l00039"></a>00039 <span class="comment">       of a tone or flicker rate of a LED.  */</span>
<a name="l00040"></a><a class="code" href="structflasher__pattern__t.html#45660d21271b2ce1761dfe08cc78e78b">00040</a>     uint8_t mod_period;
<a name="l00041"></a>00041     <span class="comment">/* This is the modulation duty.  It determines the luminance of a LED.  */</span>
<a name="l00042"></a><a class="code" href="structflasher__pattern__t.html#6aa22e2a891ad73a141d10805a77abb6">00042</a>     uint8_t mod_duty;
<a name="l00043"></a>00043     <span class="comment">/* This is the period between the start of two flashes in a sequence.  */</span>
<a name="l00044"></a><a class="code" href="structflasher__pattern__t.html#0e28c95412494805892e17482e7bd8d7">00044</a>     uint8_t flasher_period;
<a name="l00045"></a>00045     <span class="comment">/* This is the flash period.  */</span>
<a name="l00046"></a><a class="code" href="structflasher__pattern__t.html#464532193fbbce36ce6ff9db50bb0811">00046</a>     uint8_t flasher_duty;
<a name="l00047"></a>00047     <span class="comment">/* This is the number of flashes in the sequence.  */</span>
<a name="l00048"></a><a class="code" href="structflasher__pattern__t.html#8ea1393316a1b076056ce40cbfebb80a">00048</a>     uint8_t flashes;
<a name="l00049"></a>00049     <span class="comment">/* This is the number of flasher periods before the sequence repeats.  */</span>
<a name="l00050"></a><a class="code" href="structflasher__pattern__t.html#9e6acd60a694d52fbe79495d8e37b1a0">00050</a>     uint8_t period;
<a name="l00051"></a>00051 } <a class="code" href="structflasher__pattern__t.html">flasher_pattern_t</a>;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 
<a name="l00054"></a><a class="code" href="flasher_8h.html#f374161f50947c9d17706e83cb837c1f">00054</a> <span class="preprocessor">#define FLASHER_ACTIVE_P(FLASHER) \</span>
<a name="l00055"></a>00055 <span class="preprocessor">    (((flasher_obj_t *)(FLASHER))-&gt;pattern != 0)</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span>
<a name="l00057"></a>00057 
<a name="l00058"></a><a class="code" href="flasher_8h.html#1ba4b34175f4a89b4891a76375e4dfeb">00058</a> <span class="preprocessor">#define FLASHER_PATTERN_FLASHES_SET(PATTERN, FLASHES) \</span>
<a name="l00059"></a>00059 <span class="preprocessor">    (PATTERN)-&gt;flashes = (FLASHES)</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span>
<a name="l00061"></a>00061 <span class="comment">/* This structure is defined here so the compiler can allocate enough</span>
<a name="l00062"></a>00062 <span class="comment">   memory for it.  However, its fields should be treated as</span>
<a name="l00063"></a>00063 <span class="comment">   private.  */</span>
<a name="l00064"></a><a class="code" href="structflasher__private__t.html">00064</a> <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00065"></a>00065 {
<a name="l00066"></a><a class="code" href="structflasher__private__t.html#ba1d1e2c388c469ffaf6811226e911ab">00066</a>     <a class="code" href="structflasher__pattern__t.html">flasher_pattern_t</a> *pattern;
<a name="l00067"></a><a class="code" href="structflasher__private__t.html#6ca9584807ab04f330c5fe49f47a923f">00067</a>     uint8_t mod_count;
<a name="l00068"></a><a class="code" href="structflasher__private__t.html#d64f71430b08b1983e5ce7b93bfa435f">00068</a>     uint8_t flasher_count;
<a name="l00069"></a><a class="code" href="structflasher__private__t.html#d420dea019064d7426aa55a1a57693d5">00069</a>     uint8_t flashes_count;
<a name="l00070"></a><a class="code" href="structflasher__private__t.html#5ad162cba01cb2e4797b6257208d1f43">00070</a>     uint8_t flasher_prescale;
<a name="l00071"></a>00071 } <a class="code" href="structflasher__private__t.html">flasher_private_t</a>;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="preprocessor">#ifdef FLASHER_TRANSPARENT</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span><span class="keyword">typedef</span> <a class="code" href="structflasher__private__t.html">flasher_private_t</a> <a class="code" href="structflasher__obj__t.html">flasher_obj_t</a>;
<a name="l00076"></a>00076 <span class="preprocessor">#else</span>
<a name="l00077"></a><a class="code" href="structflasher__obj__t.html#a3968aafba4e948e01f3f01ac017e394">00077</a> <span class="preprocessor"></span><span class="keyword">typedef</span> <span class="keyword">struct </span>{<span class="keywordtype">char</span> dummy[<span class="keyword">sizeof</span> (<a class="code" href="structflasher__private__t.html">flasher_private_t</a>)];} <a class="code" href="structflasher__obj__t.html">flasher_obj_t</a>;
<a name="l00078"></a>00078 <span class="preprocessor">#endif</span>
<a name="l00079"></a><a class="code" href="flasher_8h.html#fe88ada1e0768b14d46bf2164d9be4e2">00079</a> <span class="preprocessor"></span><span class="keyword">typedef</span> <a class="code" href="structflasher__obj__t.html">flasher_obj_t</a> *<a class="code" href="structflasher__obj__t.html">flasher_t</a>;
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="keyword">extern</span> int8_t
<a name="l00083"></a>00083 <a class="code" href="flasher_8c.html#2ee38e9f9956e5dce687ac4a208704ff">flasher_pattern_set</a> (<a class="code" href="structflasher__obj__t.html">flasher_t</a> flasher, <a class="code" href="structflasher__pattern__t.html">flasher_pattern_t</a> *pattern);
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 <span class="keyword">extern</span> <a class="code" href="structflasher__pattern__t.html">flasher_pattern_t</a> *
<a name="l00086"></a>00086 <a class="code" href="flasher_8c.html#0b782c0c8742e5c324fd5da37b73caf3">flasher_pattern_get</a> (<a class="code" href="structflasher__obj__t.html">flasher_t</a> flasher);
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="keyword">extern</span> int8_t
<a name="l00089"></a>00089 <a class="code" href="flasher_8c.html#f56ddf24fcf72ea8677f55e4a373b442">flasher_phase_set</a> (<a class="code" href="structflasher__obj__t.html">flasher_t</a> flasher, uint8_t phase);
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 <span class="keyword">extern</span> <span class="keywordtype">bool</span>
<a name="l00092"></a>00092 <a class="code" href="flasher_8c.html#2b2419ef109cf6f86e6f89c382f34f96">flasher_update</a> (<a class="code" href="structflasher__obj__t.html">flasher_t</a>);
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 
<a name="l00095"></a>00095 <span class="comment">/* INFO is a pointer into RAM that stores the state of the FLASH.</span>
<a name="l00096"></a>00096 <span class="comment">   CFG is a pointer into ROM to define the port the FLASH is connected to.</span>
<a name="l00097"></a>00097 <span class="comment">   The returned handle is passed to the other flasher_xxx routines to denote</span>
<a name="l00098"></a>00098 <span class="comment">   the FLASH to operate on.  */</span>
<a name="l00099"></a>00099 <span class="keyword">extern</span> <a class="code" href="structflasher__obj__t.html">flasher_t</a>
<a name="l00100"></a>00100 <a class="code" href="flasher_8c.html#42c76123904c104ec0afbaddc8520a83">flasher_init</a> (<a class="code" href="structflasher__obj__t.html">flasher_obj_t</a> *info);
<a name="l00101"></a>00101 <span class="preprocessor">#endif</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Tue May 27 11:44:04 2008 for mmculib by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.5 </small></address>
</body>
</html>
