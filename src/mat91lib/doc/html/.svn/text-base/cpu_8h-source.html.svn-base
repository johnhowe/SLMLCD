<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>mmculib: cpu.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.5 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
<h1>cpu.h</h1><a href="cpu_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00006"></a>00006 <span class="preprocessor">#ifndef CPU_H</span>
<a name="l00007"></a>00007 <span class="preprocessor"></span><span class="preprocessor">#define CPU_H</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span>
<a name="l00009"></a>00009 <span class="preprocessor">#include "config.h"</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include "<a class="code" href="irq_8h.html">irq.h</a>"</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include "<a class="code" href="bits_8h.html">bits.h</a>"</span>
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 
<a name="l00014"></a><a class="code" href="cpu_8h.html#a29ab10c30b414be12ae618a3f90aa1c">00014</a> <span class="preprocessor">#define CPU_FLASH_SPEED 30e6</span>
<a name="l00015"></a>00015 <span class="preprocessor"></span>
<a name="l00016"></a>00016 <span class="preprocessor">#ifndef CPU_FLASH_READ_CYCLES </span>
<a name="l00017"></a><a class="code" href="cpu_8h.html#d3e094d48053286c085414136afea2c7">00017</a> <span class="preprocessor"></span><span class="preprocessor">#define CPU_FLASH_READ_CYCLES 1</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span><span class="comment">// #define CPU_FLASH_READ_CYCLES ((int) ((F_CPU + CPU_FLASH_SPEED - 1) / CPU_FLASH_SPEED))</span>
<a name="l00019"></a>00019 <span class="preprocessor">#endif</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span>
<a name="l00021"></a>00021 
<a name="l00046"></a><a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d3">00046</a> <span class="keyword">typedef</span> <span class="keyword">enum</span> 
<a name="l00047"></a>00047 {
<a name="l00048"></a><a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d3954152a3eb9fd99f88fa84a3d9a70922">00048</a>     <a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d3954152a3eb9fd99f88fa84a3d9a70922">CPU_MODE_USR</a> = 0x10,        
<a name="l00049"></a><a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d362e26a4f6617311e024d09284854c30d">00049</a>     <a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d362e26a4f6617311e024d09284854c30d">CPU_MODE_FIQ</a> = 0x11,        
<a name="l00050"></a><a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d3c93f31be0c7a9f239cadcf72ab8ce09f">00050</a>     <a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d3c93f31be0c7a9f239cadcf72ab8ce09f">CPU_MODE_IRQ</a> = 0x12,        
<a name="l00051"></a><a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d3b698e14bad93399bf26b1d6c8533a538">00051</a>     <a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d3b698e14bad93399bf26b1d6c8533a538">CPU_MODE_SVC</a> = 0x13,        
<a name="l00052"></a><a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d33342ce56c7eadd4f34f8d3e227648577">00052</a>     <a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d33342ce56c7eadd4f34f8d3e227648577">CPU_MODE_ABT</a> = 0x17,        
<a name="l00053"></a><a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d35cf2a70583ebe3dfe32cc1a60ade7820">00053</a>     <a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d35cf2a70583ebe3dfe32cc1a60ade7820">CPU_MODE_UND</a> = 0x1b,        
<a name="l00054"></a><a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d3de68dd11afe4e89cb49158ca90fc85a3">00054</a>     <a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d3de68dd11afe4e89cb49158ca90fc85a3">CPU_MODE_SYS</a> = 0x1f         
<a name="l00055"></a>00055 } <a class="code" href="cpu_8h.html#eee41a5dfc56e8b17d75ea76b54943d3">arm_mode_t</a>;
<a name="l00056"></a>00056 
<a name="l00057"></a><a class="code" href="cpu_8h.html#2ecf1d4f04959ecdb69875fb0e36e621">00057</a> <span class="preprocessor">#define CPU_MODE_MASK 0x1f</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span>
<a name="l00059"></a>00059 
<a name="l00061"></a>00061 <span class="keyword">enum</span> 
<a name="l00062"></a>00062 {
<a name="l00063"></a><a class="code" href="cpu_8h.html#df764cbdea00d65edcd07bb9953ad2b7d5be9cc47cedf2ab4e13a6da0abcac9f">00063</a>     <a class="code" href="cpu_8h.html#df764cbdea00d65edcd07bb9953ad2b7d5be9cc47cedf2ab4e13a6da0abcac9f">CPU_T_BIT</a> = BIT (5),        
<a name="l00064"></a><a class="code" href="cpu_8h.html#df764cbdea00d65edcd07bb9953ad2b7278525e96113e9c2c1475d27652b1957">00064</a>     <a class="code" href="cpu_8h.html#df764cbdea00d65edcd07bb9953ad2b7278525e96113e9c2c1475d27652b1957">CPU_F_BIT</a> = BIT (6),        
<a name="l00065"></a><a class="code" href="cpu_8h.html#df764cbdea00d65edcd07bb9953ad2b7694aa2cfe58cae6e7edf056536692d58">00065</a>     <a class="code" href="cpu_8h.html#df764cbdea00d65edcd07bb9953ad2b7694aa2cfe58cae6e7edf056536692d58">CPU_I_BIT</a> = BIT (7)         
<a name="l00066"></a>00066 };
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 
<a name="l00071"></a><a class="code" href="cpu_8h.html#f632ecf4ed74ecf285b4aacf406f8f6d">00071</a> __inline <a class="code" href="cpu_8h.html#f632ecf4ed74ecf285b4aacf406f8f6d">__attribute__</a> ((always_inline)) 
<a name="l00072"></a>00072     void cpu_sp_set (uint32_t val) 
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074     <span class="keyword">register</span> uint32_t sp __asm__ (<span class="stringliteral">"sp"</span>) = val;
<a name="l00075"></a>00075 
<a name="l00076"></a>00076     <span class="comment">/* Create a dummy use.  */</span>
<a name="l00077"></a>00077     __asm__ (<span class="stringliteral">""</span> : : <span class="stringliteral">"r"</span> (sp));
<a name="l00078"></a>00078 }
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 
<a name="l00084"></a><a class="code" href="cpu_8h.html#e273bcfa0f7c66508cdfa5e847c81008">00084</a> <span class="preprocessor">#define cpu_cpsr_c_set_const(cpsr) \</span>
<a name="l00085"></a>00085 <span class="preprocessor"> __asm__ ("\tmsr CPSR_c, %0" : : "i" (cpsr))</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span>
<a name="l00087"></a>00087 
<a name="l00090"></a>00090 __inline <a class="code" href="cpu_8h.html#f632ecf4ed74ecf285b4aacf406f8f6d">__attribute__</a> ((always_inline)) 
<a name="l00091"></a>00091     void cpu_cpsr_c_set (uint32_t cpsr) 
<a name="l00092"></a>00092 {
<a name="l00093"></a>00093     __asm__ (<span class="stringliteral">"\tmsr CPSR_c, %0"</span> : : <span class="stringliteral">"r"</span> (cpsr));
<a name="l00094"></a>00094 }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 
<a name="l00099"></a>00099 __inline <a class="code" href="cpu_8h.html#f632ecf4ed74ecf285b4aacf406f8f6d">__attribute__</a> ((always_inline)) 
<a name="l00100"></a>00100     void cpu_cpsr_f_set (uint32_t cpsr) 
<a name="l00101"></a>00101 {
<a name="l00102"></a>00102     __asm__ (<span class="stringliteral">"\tmsr CPSR_f, %0"</span> : : <span class="stringliteral">"r"</span> (cpsr) : <span class="stringliteral">"cc"</span>);
<a name="l00103"></a>00103 }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 
<a name="l00109"></a>00109 __inline <a class="code" href="cpu_8h.html#f632ecf4ed74ecf285b4aacf406f8f6d">__attribute__</a> ((always_inline)) 
<a name="l00110"></a>00110     void cpu_cpsr_set (uint32_t cpsr) 
<a name="l00111"></a>00111 {
<a name="l00112"></a>00112     __asm__ (<span class="stringliteral">"\tmsr CPSR_fsxc, %0"</span> : : <span class="stringliteral">"r"</span> (cpsr) : <span class="stringliteral">"cc"</span>);
<a name="l00113"></a>00113 }
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 
<a name="l00118"></a>00118 __inline <a class="code" href="cpu_8h.html#f632ecf4ed74ecf285b4aacf406f8f6d">__attribute__</a> ((always_inline)) 
<a name="l00119"></a>00119     uint32_t cpu_cpsr_get (<span class="keywordtype">void</span>) 
<a name="l00120"></a>00120 {
<a name="l00121"></a>00121     uint32_t cpsr;
<a name="l00122"></a>00122 
<a name="l00123"></a>00123     __asm__ (<span class="stringliteral">"\tmrs %0, CPSR"</span> : <span class="stringliteral">"=r"</span> (cpsr) :);
<a name="l00124"></a>00124     <span class="keywordflow">return</span> cpsr;
<a name="l00125"></a>00125 }
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 
<a name="l00130"></a>00130 __inline <a class="code" href="cpu_8h.html#f632ecf4ed74ecf285b4aacf406f8f6d">__attribute__</a> ((always_inline)) 
<a name="l00131"></a>00131     void cpu_mode_set (uint32_t mode) 
<a name="l00132"></a>00132 {
<a name="l00133"></a>00133     uint32_t cpsr;
<a name="l00134"></a>00134     
<a name="l00135"></a>00135     cpsr = cpu_cpsr_get ();
<a name="l00136"></a>00136  
<a name="l00137"></a>00137     cpsr &amp;= ~<a class="code" href="cpu_8h.html#2ecf1d4f04959ecdb69875fb0e36e621">CPU_MODE_MASK</a>;
<a name="l00138"></a>00138     cpsr |= mode;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     cpu_cpsr_c_set (cpsr);
<a name="l00141"></a>00141 }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 
<a name="l00146"></a>00146 __inline <a class="code" href="cpu_8h.html#f632ecf4ed74ecf285b4aacf406f8f6d">__attribute__</a> ((always_inline)) 
<a name="l00147"></a>00147     uint32_t cpu_spsr_get (<span class="keywordtype">void</span>) 
<a name="l00148"></a>00148 {
<a name="l00149"></a>00149     uint32_t spsr;
<a name="l00150"></a>00150 
<a name="l00151"></a>00151     __asm__ (<span class="stringliteral">"\tmrs %0, SPSR"</span> : <span class="stringliteral">"=r"</span> (spsr) :);
<a name="l00152"></a>00152     <span class="keywordflow">return</span> spsr;
<a name="l00153"></a>00153 }
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 
<a name="l00164"></a><a class="code" href="cpu_8h.html#2fce4754c55276f86960163dc26b86f9">00164</a> __inline <span class="keywordtype">void</span> <a class="code" href="cpu_8h.html#2fce4754c55276f86960163dc26b86f9">cpu_sram_remap</a> (<span class="keywordtype">void</span>)
<a name="l00165"></a>00165 {
<a name="l00166"></a>00166     uint32_t tmp;
<a name="l00167"></a>00167 
<a name="l00168"></a>00168     <span class="comment">/* Save the value at position 0x04 in the SRAM (undefined</span>
<a name="l00169"></a>00169 <span class="comment">     * instruction vector) then set it to zero.  */</span>
<a name="l00170"></a>00170     tmp = *(uint32_t *)(<a class="code" href="AT91SAM7S256_8h.html#03e412c1f537b06c9cf737703442dde4">AT91C_ISRAM</a> + 0x04);
<a name="l00171"></a>00171     *(uint32_t *)(<a class="code" href="AT91SAM7S256_8h.html#03e412c1f537b06c9cf737703442dde4">AT91C_ISRAM</a> + 0x04) = 0;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173     <span class="comment">/* If the base vector is now non-zero it is mapped to flash so we</span>
<a name="l00174"></a>00174 <span class="comment">       must map it back to SRAM */</span>
<a name="l00175"></a>00175     <span class="keywordflow">if</span> (*(uint32_t *)0x04)
<a name="l00176"></a>00176         <a class="code" href="AT91SAM7S256_8h.html#235bf6db2f49947de6fd62d0439d4af9">AT91C_BASE_MC</a>-&gt;MC_RCR = <a class="code" href="AT91SAM7S256_8h.html#b6b8204ee6ccdefb2d36105a2073d01f">AT91C_MC_RCB</a>;
<a name="l00177"></a>00177 
<a name="l00178"></a>00178     <span class="comment">/* Restore vector in SRAM  */</span>
<a name="l00179"></a>00179     *(uint32_t *)(<a class="code" href="AT91SAM7S256_8h.html#03e412c1f537b06c9cf737703442dde4">AT91C_ISRAM</a> + 0x04) = tmp;
<a name="l00180"></a>00180 }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 
<a name="l00184"></a>00184 __inline <span class="keywordtype">void</span> 
<a name="l00185"></a><a class="code" href="cpu_8h.html#5f0bfcd3af2b0d67ce7c436299d11a51">00185</a> <a class="code" href="cpu_8h.html#5f0bfcd3af2b0d67ce7c436299d11a51">cpu_sram_unremap</a> (<span class="keywordtype">void</span>)
<a name="l00186"></a>00186 {
<a name="l00187"></a>00187     uint32_t tmp;
<a name="l00188"></a>00188 
<a name="l00189"></a>00189     <span class="comment">/* Save the value at position 0x04 in the SRAM (undefined</span>
<a name="l00190"></a>00190 <span class="comment">       instruction vector) then set it to zero.  */</span>
<a name="l00191"></a>00191     tmp = *(uint32_t *)(<a class="code" href="AT91SAM7S256_8h.html#03e412c1f537b06c9cf737703442dde4">AT91C_ISRAM</a> + 0x04);
<a name="l00192"></a>00192     *(uint32_t *)(<a class="code" href="AT91SAM7S256_8h.html#03e412c1f537b06c9cf737703442dde4">AT91C_ISRAM</a> + 0x04) = 0;
<a name="l00193"></a>00193 
<a name="l00194"></a>00194     <span class="comment">/* If the base vector is zero then it is mapped to SRAM, hence we</span>
<a name="l00195"></a>00195 <span class="comment">       toggle the bit to map it back to flash. */</span>
<a name="l00196"></a>00196     <span class="keywordflow">if</span> (!*(uint32_t *)(<a class="code" href="AT91SAM7S256_8h.html#03e412c1f537b06c9cf737703442dde4">AT91C_ISRAM</a> + 0x04))
<a name="l00197"></a>00197         <a class="code" href="AT91SAM7S256_8h.html#235bf6db2f49947de6fd62d0439d4af9">AT91C_BASE_MC</a>-&gt;MC_RCR = <a class="code" href="AT91SAM7S256_8h.html#b6b8204ee6ccdefb2d36105a2073d01f">AT91C_MC_RCB</a>;
<a name="l00198"></a>00198 
<a name="l00199"></a>00199     <span class="comment">/* Restore vector in SRAM  */</span>
<a name="l00200"></a>00200     *(uint32_t *)(<a class="code" href="AT91SAM7S256_8h.html#03e412c1f537b06c9cf737703442dde4">AT91C_ISRAM</a> + 0x04) = tmp;
<a name="l00201"></a>00201 }
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 
<a name="l00205"></a>00205 __inline <span class="keywordtype">void</span>
<a name="l00206"></a><a class="code" href="cpu_8h.html#ec9330e16bf3cc611660796b9da475d7">00206</a> <a class="code" href="cpu_8h.html#ec9330e16bf3cc611660796b9da475d7">cpu_watchdog_disable</a> (<span class="keywordtype">void</span>)
<a name="l00207"></a>00207 {
<a name="l00208"></a>00208     <a class="code" href="AT91SAM7S256_8h.html#af6dc0a816031c6ed3ecdc62590c5da4">AT91C_BASE_WDTC</a>-&gt;WDTC_WDMR = <a class="code" href="AT91SAM7S256_8h.html#14f2f2814929d111a4e7e8e1225d8a68">AT91C_WDTC_WDDIS</a>;
<a name="l00209"></a>00209 }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 <span class="comment">/* The AT91 Flash is single plane so it is not possible</span>
<a name="l00214"></a>00214 <span class="comment">   to write to it while executing code out of it.  */</span>
<a name="l00215"></a>00215 
<a name="l00217"></a>00217 <span class="keyword">static</span> <span class="keywordtype">void</span>
<a name="l00218"></a><a class="code" href="cpu_8h.html#c9c3a47ef079a99be4a6094613324801">00218</a> <a class="code" href="cpu_8c.html#c9c3a47ef079a99be4a6094613324801">cpu_flash_init</a> (<span class="keywordtype">void</span>)
<a name="l00219"></a>00219 {
<a name="l00220"></a>00220     <span class="keywordflow">switch</span> (<a class="code" href="cpu_8h.html#d3e094d48053286c085414136afea2c7">CPU_FLASH_READ_CYCLES</a>)
<a name="l00221"></a>00221     {
<a name="l00222"></a>00222     <span class="keywordflow">case</span> 1:
<a name="l00223"></a>00223         <span class="comment">/* Set 0 flash wait states for reading, 1 for writing.  */</span>
<a name="l00224"></a>00224         <a class="code" href="AT91SAM7S256_8h.html#235bf6db2f49947de6fd62d0439d4af9">AT91C_BASE_MC</a>-&gt;MC_FMR = <a class="code" href="AT91SAM7S256_8h.html#24a24f5e0887516b01745b784bb79acc">AT91C_MC_FWS_0FWS</a>;
<a name="l00225"></a>00225         <span class="keywordflow">break</span>;
<a name="l00226"></a>00226 
<a name="l00227"></a>00227     <span class="keywordflow">case</span> 2:
<a name="l00228"></a>00228         <span class="comment">/* Set 1 flash wait state for reading, 2 for writing.  */</span>
<a name="l00229"></a>00229         <a class="code" href="AT91SAM7S256_8h.html#235bf6db2f49947de6fd62d0439d4af9">AT91C_BASE_MC</a>-&gt;MC_FMR = <a class="code" href="AT91SAM7S256_8h.html#2c9b74e35c152de5a755a13a05e51349">AT91C_MC_FWS_1FWS</a>;
<a name="l00230"></a>00230         <span class="keywordflow">break</span>;
<a name="l00231"></a>00231 
<a name="l00232"></a>00232     <span class="keywordflow">case</span> 3:
<a name="l00233"></a>00233         <span class="comment">/* Set 2 flash wait states for reading, 3 for writing.  */</span>
<a name="l00234"></a>00234         <a class="code" href="AT91SAM7S256_8h.html#235bf6db2f49947de6fd62d0439d4af9">AT91C_BASE_MC</a>-&gt;MC_FMR = <a class="code" href="AT91SAM7S256_8h.html#686bdaa960fa1c91cb3451b639aac253">AT91C_MC_FWS_2FWS</a>;
<a name="l00235"></a>00235         <span class="keywordflow">break</span>;
<a name="l00236"></a>00236 
<a name="l00237"></a>00237     <span class="keywordflow">default</span>:
<a name="l00238"></a>00238         <span class="comment">/* Set 3 flash wait states for reading, 4 for writing.  */</span>
<a name="l00239"></a>00239         <a class="code" href="AT91SAM7S256_8h.html#235bf6db2f49947de6fd62d0439d4af9">AT91C_BASE_MC</a>-&gt;MC_FMR = <a class="code" href="AT91SAM7S256_8h.html#62e144d03d7512ddc936e3075294bfc0">AT91C_MC_FWS_3FWS</a>;
<a name="l00240"></a>00240         <span class="keywordflow">break</span>;
<a name="l00241"></a>00241     }
<a name="l00242"></a>00242 
<a name="l00243"></a>00243     <span class="comment">/* Set number of MCK cycles per microsecond for the Flash</span>
<a name="l00244"></a>00244 <span class="comment">       microsecond cycle number (FMCN) field of the Flash mode</span>
<a name="l00245"></a>00245 <span class="comment">       register (FMR).  */</span>
<a name="l00246"></a>00246     <a class="code" href="bits_8h.html#3a15e29ed9da158ca980065c2f7610a5">BITS_INSERT</a> (<a class="code" href="AT91SAM7S256_8h.html#235bf6db2f49947de6fd62d0439d4af9">AT91C_BASE_MC</a>-&gt;MC_FMR, (uint16_t) (F_CPU / 1e6), 16, 23);
<a name="l00247"></a>00247 }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 
<a name="l00250"></a><a class="code" href="cpu_8h.html#f95f764171696f885af7d5ad5e51297f">00250</a> <span class="preprocessor">#define F_SLCK 32768</span>
<a name="l00251"></a>00251 <span class="preprocessor"></span>
<a name="l00252"></a><a class="code" href="cpu_8h.html#1c85ebcccafdd79c1b8cde66102e15f8">00252</a> <span class="preprocessor">#define CPU_OS_DELAY 1.5e-3</span>
<a name="l00253"></a><a class="code" href="cpu_8h.html#ae7db0ac3be54568c276149e1186a9a9">00253</a> <span class="preprocessor"></span><span class="preprocessor">#define CPU_OS_COUNT ((uint16_t) (CPU_OS_DELAY * F_SLCK + 7)) / 8</span>
<a name="l00254"></a>00254 <span class="preprocessor"></span>
<a name="l00255"></a><a class="code" href="cpu_8h.html#431545043ea6fd93d472a2dd41384dbc">00255</a> <span class="preprocessor">#define CPU_PLL_DELAY 0.9e-3</span>
<a name="l00256"></a><a class="code" href="cpu_8h.html#0e76a91bb8f8aba29f096018d7dc13f9">00256</a> <span class="preprocessor"></span><span class="preprocessor">#define CPU_PLL_COUNT (uint16_t) (CPU_PLL_DELAY * F_SLCK)</span>
<a name="l00257"></a>00257 <span class="preprocessor"></span>
<a name="l00258"></a><a class="code" href="cpu_8h.html#f999d49621875cf8998ab753b0dd073a">00258</a> <span class="preprocessor">#define CPU_USB_LOG2_DIV 0</span>
<a name="l00259"></a>00259 <span class="preprocessor"></span>
<a name="l00260"></a>00260 
<a name="l00262"></a>00262 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span>
<a name="l00263"></a><a class="code" href="cpu_8h.html#bc08e828b40765f1f33626b742c526d3">00263</a> <a class="code" href="cpu_8c.html#bc08e828b40765f1f33626b742c526d3">cpu_clock_init</a> (<span class="keywordtype">void</span>)
<a name="l00264"></a>00264 {
<a name="l00265"></a>00265     <span class="comment">/* To minimize the power required to start up the system, the main</span>
<a name="l00266"></a>00266 <span class="comment">       oscillator is disabled after reset and slow clock is</span>
<a name="l00267"></a>00267 <span class="comment">       selected. </span>
<a name="l00268"></a>00268 <span class="comment"></span>
<a name="l00269"></a>00269 <span class="comment">       There are three clock sources: SLCK (the RC oscillator slow</span>
<a name="l00270"></a>00270 <span class="comment">       clock), MAINCK (the external crytal main clock), and PLLCK (the</span>
<a name="l00271"></a>00271 <span class="comment">       output of the phase locked loop driven by MAINCK).  One of</span>
<a name="l00272"></a>00272 <span class="comment">       these three clock sources can be fed to a prescaler (with</span>
<a name="l00273"></a>00273 <span class="comment">       divisors 2^0 ... 2^6) to drive MCK (master clock).</span>
<a name="l00274"></a>00274 <span class="comment">       </span>
<a name="l00275"></a>00275 <span class="comment">       The main oscillator (external crystal) can range from 3--20 MHz.</span>
<a name="l00276"></a>00276 <span class="comment">       The PLL frequency can range from 80--220 MHz. </span>
<a name="l00277"></a>00277 <span class="comment">    */</span>
<a name="l00278"></a>00278 
<a name="l00279"></a>00279     <span class="comment">/* Enable the MAINCK oscillator and wait for it to start up.  The</span>
<a name="l00280"></a>00280 <span class="comment">       start delay is CPU_OS_COUNT * 8 SLCK cycles.  */</span>
<a name="l00281"></a>00281     <a class="code" href="AT91SAM7S256_8h.html#88f638978d677a52e3bad3966caa40ab">AT91C_BASE_PMC</a>-&gt;PMC_MOR = <a class="code" href="bits_8h.html#9251636670698144f9dc24990cf7a042">BITS</a> (<a class="code" href="cpu_8h.html#ae7db0ac3be54568c276149e1186a9a9">CPU_OS_COUNT</a>, 8, 15) | <a class="code" href="AT91SAM7S256_8h.html#bc58240679a941a11db833389e9cdb5f">AT91C_CKGR_MOSCEN</a>;
<a name="l00282"></a>00282     
<a name="l00283"></a>00283 <span class="preprocessor">#ifndef SIM_RUN</span>
<a name="l00284"></a>00284 <span class="preprocessor"></span>    <span class="comment">/*  Wait for the oscillator to start up.  */</span>
<a name="l00285"></a>00285     <span class="keywordflow">while</span> (!(<a class="code" href="AT91SAM7S256_8h.html#88f638978d677a52e3bad3966caa40ab">AT91C_BASE_PMC</a>-&gt;PMC_SR &amp; <a class="code" href="AT91SAM7S256_8h.html#b701153e8fa354983de157cfadedd7a2">AT91C_PMC_MOSCS</a>))
<a name="l00286"></a>00286         <span class="keywordflow">continue</span>;
<a name="l00287"></a>00287 <span class="preprocessor">#endif</span>
<a name="l00288"></a>00288 <span class="preprocessor"></span>    
<a name="l00289"></a>00289     <span class="comment">/* The PLL start delay is CPU_PLL_COUNT SLCK cycles.  */</span>
<a name="l00290"></a>00290     <a class="code" href="AT91SAM7S256_8h.html#88f638978d677a52e3bad3966caa40ab">AT91C_BASE_PMC</a>-&gt;PMC_PLLR = <a class="code" href="bits_8h.html#9251636670698144f9dc24990cf7a042">BITS</a> (CPU_PLL_DIV, 0, 7) 
<a name="l00291"></a>00291         | <a class="code" href="bits_8h.html#9251636670698144f9dc24990cf7a042">BITS</a> (CPU_PLL_MUL - 1, 16, 26)
<a name="l00292"></a>00292         | <a class="code" href="bits_8h.html#9251636670698144f9dc24990cf7a042">BITS</a> (<a class="code" href="cpu_8h.html#0e76a91bb8f8aba29f096018d7dc13f9">CPU_PLL_COUNT</a>, 8, 13)
<a name="l00293"></a>00293         | <a class="code" href="bits_8h.html#9251636670698144f9dc24990cf7a042">BITS</a> (<a class="code" href="cpu_8h.html#f999d49621875cf8998ab753b0dd073a">CPU_USB_LOG2_DIV</a>, 28, 29);
<a name="l00294"></a>00294 
<a name="l00295"></a>00295 <span class="preprocessor">#ifndef SIM_RUN</span>
<a name="l00296"></a>00296 <span class="preprocessor"></span>    <span class="comment">/*  Wait for the PLL to start up.  */</span>
<a name="l00297"></a>00297     <span class="keywordflow">while</span> (!(<a class="code" href="AT91SAM7S256_8h.html#88f638978d677a52e3bad3966caa40ab">AT91C_BASE_PMC</a>-&gt;PMC_SR &amp; <a class="code" href="AT91SAM7S256_8h.html#794cb8ea85aa95014e6b4a6a527b1988">AT91C_PMC_LOCK</a>))
<a name="l00298"></a>00298         <span class="keywordflow">continue</span>;
<a name="l00299"></a>00299 
<a name="l00300"></a>00300     <span class="comment">/* Wait for MCK to start up.  */</span>
<a name="l00301"></a>00301     <span class="keywordflow">while</span> (!(<a class="code" href="AT91SAM7S256_8h.html#88f638978d677a52e3bad3966caa40ab">AT91C_BASE_PMC</a>-&gt;PMC_SR &amp; <a class="code" href="AT91SAM7S256_8h.html#0a5bcb27abbe8c2fc3c2b9a4bad3bf69">AT91C_PMC_MCKRDY</a>))
<a name="l00302"></a>00302         <span class="keywordflow">continue</span>;
<a name="l00303"></a>00303 <span class="preprocessor">#endif</span>
<a name="l00304"></a>00304 <span class="preprocessor"></span>
<a name="l00305"></a>00305     <span class="comment">/* Set prescaler so F_MCK = F_PLLCK / 2.  */</span>
<a name="l00306"></a>00306     <a class="code" href="AT91SAM7S256_8h.html#88f638978d677a52e3bad3966caa40ab">AT91C_BASE_PMC</a>-&gt;PMC_MCKR = <a class="code" href="AT91SAM7S256_8h.html#771237f361ba9230f118bbf90f008a5a">AT91C_PMC_PRES_CLK_2</a>;
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 <span class="preprocessor">#ifndef SIM_RUN</span>
<a name="l00309"></a>00309 <span class="preprocessor"></span>    <span class="comment">/* Wait for MCK to start up.  */</span>
<a name="l00310"></a>00310     <span class="keywordflow">while</span> (!(<a class="code" href="AT91SAM7S256_8h.html#88f638978d677a52e3bad3966caa40ab">AT91C_BASE_PMC</a>-&gt;PMC_SR &amp; <a class="code" href="AT91SAM7S256_8h.html#0a5bcb27abbe8c2fc3c2b9a4bad3bf69">AT91C_PMC_MCKRDY</a>))
<a name="l00311"></a>00311         <span class="keywordflow">continue</span>;
<a name="l00312"></a>00312 <span class="preprocessor">#endif</span>
<a name="l00313"></a>00313 <span class="preprocessor"></span> 
<a name="l00314"></a>00314     <span class="comment">/* Switch to PLLCK for MCK.  */</span>
<a name="l00315"></a>00315     <a class="code" href="AT91SAM7S256_8h.html#88f638978d677a52e3bad3966caa40ab">AT91C_BASE_PMC</a>-&gt;PMC_MCKR |= <a class="code" href="AT91SAM7S256_8h.html#240341dbb684bff674083a308408fb96">AT91C_PMC_CSS_PLL_CLK</a>;
<a name="l00316"></a>00316 
<a name="l00317"></a>00317 <span class="preprocessor">#ifndef SIM_RUN</span>
<a name="l00318"></a>00318 <span class="preprocessor"></span>    <span class="comment">/* Wait for MCK to start up.  */</span>
<a name="l00319"></a>00319     <span class="keywordflow">while</span> (!(<a class="code" href="AT91SAM7S256_8h.html#88f638978d677a52e3bad3966caa40ab">AT91C_BASE_PMC</a>-&gt;PMC_SR &amp; <a class="code" href="AT91SAM7S256_8h.html#0a5bcb27abbe8c2fc3c2b9a4bad3bf69">AT91C_PMC_MCKRDY</a>))
<a name="l00320"></a>00320         <span class="keywordflow">continue</span>;
<a name="l00321"></a>00321 <span class="preprocessor">#endif</span>
<a name="l00322"></a>00322 <span class="preprocessor"></span>}
<a name="l00323"></a>00323 
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span>
<a name="l00326"></a><a class="code" href="cpu_8h.html#a8cc514a5cebd91bd86deb4db7c49572">00326</a> <a class="code" href="cpu_8h.html#a8cc514a5cebd91bd86deb4db7c49572">cpu_idle</a> (<span class="keywordtype">void</span>)
<a name="l00327"></a>00327 {
<a name="l00328"></a>00328     <span class="comment">/* Turn off CPU clock after current instruction.  It will be</span>
<a name="l00329"></a>00329 <span class="comment">       re-enabled when an interrupt occurs.  */</span>
<a name="l00330"></a>00330     <a class="code" href="AT91SAM7S256_8h.html#88f638978d677a52e3bad3966caa40ab">AT91C_BASE_PMC</a>-&gt;PMC_SCDR = <a class="code" href="AT91SAM7S256_8h.html#c0b54b8eec4f185d31b506fa4ebb4659">AT91C_PMC_PCK</a>;
<a name="l00331"></a>00331 }
<a name="l00332"></a>00332 
<a name="l00333"></a>00333 
<a name="l00334"></a>00334 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span>
<a name="l00335"></a><a class="code" href="cpu_8h.html#2ef7f46934323f0d3b33755b4700d21c">00335</a> <a class="code" href="cpu_8h.html#2ef7f46934323f0d3b33755b4700d21c">cpu_reset</a> (<span class="keywordtype">void</span>)
<a name="l00336"></a>00336 {
<a name="l00337"></a>00337     <span class="comment">/* Reset processor and peripherals.  */</span>
<a name="l00338"></a>00338     <a class="code" href="AT91SAM7S256_8h.html#1417c31e180c8f542044e6fccb465610">AT91C_BASE_RSTC</a>-&gt;RSTC_RCR = <a class="code" href="AT91SAM7S256_8h.html#c6f23b32adaeb850f3db01283604d905">AT91C_RSTC_PROCRST</a> | <a class="code" href="AT91SAM7S256_8h.html#955d030f26231412c120bb3132ce56e2">AT91C_RSTC_PERRST</a> 
<a name="l00339"></a>00339         | (0xa5 &lt;&lt; 24);
<a name="l00340"></a>00340 }
<a name="l00341"></a>00341 
<a name="l00342"></a>00342 
<a name="l00343"></a>00343 <span class="comment">/* Enable NRST pin.  */</span>
<a name="l00344"></a>00344 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span>
<a name="l00345"></a><a class="code" href="cpu_8h.html#0f8361e6bcdb71d246f7de7d2e34e42e">00345</a> <a class="code" href="cpu_8h.html#0f8361e6bcdb71d246f7de7d2e34e42e">cpu_reset_enable</a> (<span class="keywordtype">void</span>)
<a name="l00346"></a>00346 {
<a name="l00347"></a>00347     <a class="code" href="AT91SAM7S256_8h.html#1417c31e180c8f542044e6fccb465610">AT91C_BASE_RSTC</a>-&gt;RSTC_RMR |= <a class="code" href="AT91SAM7S256_8h.html#a267aca405f117ff10304d5900292aaa">AT91C_RSTC_URSTEN</a> | (0xa5 &lt;&lt; 24);
<a name="l00348"></a>00348 }
<a name="l00349"></a>00349 
<a name="l00350"></a>00350 
<a name="l00351"></a>00351 <span class="comment">/* Disable NRST pin.  */</span>
<a name="l00352"></a>00352 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span>
<a name="l00353"></a><a class="code" href="cpu_8h.html#f8e65dcaae23c3c2d8d5498613836c53">00353</a> <a class="code" href="cpu_8h.html#f8e65dcaae23c3c2d8d5498613836c53">cpu_reset_disable</a> (<span class="keywordtype">void</span>)
<a name="l00354"></a>00354 {
<a name="l00355"></a>00355     <span class="comment">/* Enable NRST pin.  */</span>
<a name="l00356"></a>00356     <a class="code" href="AT91SAM7S256_8h.html#1417c31e180c8f542044e6fccb465610">AT91C_BASE_RSTC</a>-&gt;RSTC_RMR =
<a name="l00357"></a>00357         (<a class="code" href="AT91SAM7S256_8h.html#1417c31e180c8f542044e6fccb465610">AT91C_BASE_RSTC</a>-&gt;RSTC_RMR &amp; ~<a class="code" href="AT91SAM7S256_8h.html#a267aca405f117ff10304d5900292aaa">AT91C_RSTC_URSTEN</a>) | (0xa5 &lt;&lt; 24);
<a name="l00358"></a>00358 }
<a name="l00359"></a>00359 
<a name="l00360"></a>00360 
<a name="l00361"></a>00361 <span class="keyword">static</span> <span class="keyword">inline</span> uint8_t
<a name="l00362"></a><a class="code" href="cpu_8h.html#8943b698ee1a5bad8cd8ae49eca4850a">00362</a> <a class="code" href="cpu_8h.html#8943b698ee1a5bad8cd8ae49eca4850a">cpu_reset_type_get</a> (<span class="keywordtype">void</span>)
<a name="l00363"></a>00363 {
<a name="l00364"></a>00364     <span class="keywordflow">return</span> (<a class="code" href="AT91SAM7S256_8h.html#1417c31e180c8f542044e6fccb465610">AT91C_BASE_RSTC</a>-&gt;RSTC_RSR &gt;&gt; 8) &amp; 0x07;
<a name="l00365"></a>00365 }
<a name="l00366"></a>00366 
<a name="l00367"></a>00367 
<a name="l00368"></a>00368 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span>
<a name="l00369"></a><a class="code" href="cpu_8h.html#c638104994711da4e61450457e84571b">00369</a> <a class="code" href="cpu_8h.html#c638104994711da4e61450457e84571b">cpu_brownout_detect_get</a> (<span class="keywordtype">void</span>)
<a name="l00370"></a>00370 {
<a name="l00371"></a>00371     <span class="keywordflow">return</span> (<a class="code" href="AT91SAM7S256_8h.html#1417c31e180c8f542044e6fccb465610">AT91C_BASE_RSTC</a>-&gt;RSTC_RSR &amp; <a class="code" href="AT91SAM7S256_8h.html#d836bd7b8548dfc47593ebd8a3ff4011">AT91C_RSTC_BODSTS</a>) != 0;
<a name="l00372"></a>00372 }
<a name="l00373"></a>00373 
<a name="l00374"></a>00374 
<a name="l00375"></a>00375 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span>
<a name="l00376"></a><a class="code" href="cpu_8h.html#0e26fd07d602e1ee1bbd66622152e929">00376</a> <a class="code" href="cpu_8h.html#0e26fd07d602e1ee1bbd66622152e929">cpu_reset_detect_get</a> (<span class="keywordtype">void</span>)
<a name="l00377"></a>00377 {
<a name="l00378"></a>00378     <span class="keywordflow">return</span> (<a class="code" href="AT91SAM7S256_8h.html#1417c31e180c8f542044e6fccb465610">AT91C_BASE_RSTC</a>-&gt;RSTC_RSR &amp; <a class="code" href="AT91SAM7S256_8h.html#8647938ff8ece9ed87e31620c83f0301">AT91C_RSTC_URSTS</a>) != 0;
<a name="l00379"></a>00379 }
<a name="l00380"></a>00380 
<a name="l00381"></a>00381 
<a name="l00382"></a>00382 
<a name="l00383"></a>00383 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="boot__freertos_8c.html#1df1e0dd612db3618069ccdcf8b9341e">_irq_unexpected_handler</a> (<span class="keywordtype">void</span>);
<a name="l00384"></a>00384 
<a name="l00385"></a>00385 <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="cpu_8h.html#aa5f561a0cda90797fd82dadb2c2e320">_irq_spurious_handler</a> (<span class="keywordtype">void</span>);
<a name="l00386"></a>00386 
<a name="l00387"></a>00387 
<a name="l00389"></a>00389 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> 
<a name="l00390"></a><a class="code" href="cpu_8h.html#afe326016bd7ada65717f5494214c92c">00390</a> <a class="code" href="cpu_8c.html#560ad8614ae03841a10b489f4370bc51">cpu_init</a> (<span class="keywordtype">void</span>)
<a name="l00391"></a>00391 {
<a name="l00392"></a>00392     <a class="code" href="cpu_8c.html#c9c3a47ef079a99be4a6094613324801">cpu_flash_init</a> ();
<a name="l00393"></a>00393 
<a name="l00394"></a>00394     <a class="code" href="cpu_8h.html#ec9330e16bf3cc611660796b9da475d7">cpu_watchdog_disable</a> ();
<a name="l00395"></a>00395 
<a name="l00396"></a>00396     <a class="code" href="cpu_8c.html#bc08e828b40765f1f33626b742c526d3">cpu_clock_init</a> ();
<a name="l00397"></a>00397 
<a name="l00398"></a>00398     <a class="code" href="cpu_8h.html#0f8361e6bcdb71d246f7de7d2e34e42e">cpu_reset_enable</a> ();
<a name="l00399"></a>00399 
<a name="l00400"></a>00400     <a class="code" href="AT91SAM7S256_8h.html#e353aca328b3d22ff19e9086c99e77d7">AT91C_BASE_AIC</a>-&gt;AIC_SPU = (int) <a class="code" href="cpu_8h.html#aa5f561a0cda90797fd82dadb2c2e320">_irq_spurious_handler</a>;
<a name="l00401"></a>00401 
<a name="l00402"></a>00402 <span class="preprocessor">#ifdef RAM_RUN</span>
<a name="l00403"></a>00403 <span class="preprocessor"></span>    <span class="keywordflow">for</span> (<a class="code" href="irq_8h.html#1e75dfe9b790671fcdf3141a70621bb8">irq_id_t</a> <span class="keywordtype">id</span> = <a class="code" href="irq_8h.html#99fb83031ce9923c84392b4e92f956b52754447c490aab3ab72586eb49d35954">IRQ_ID_MIN</a>; <span class="keywordtype">id</span> &lt;= <a class="code" href="irq_8h.html#99fb83031ce9923c84392b4e92f956b5db0c173339a7181de7d7b76d8dd24a40">IRQ_ID_MAX</a>; <span class="keywordtype">id</span>++) 
<a name="l00404"></a>00404         <a class="code" href="irq_8h.html#ab1c273858de2ce5d2c77ae5295a55e3">irq_vector_set</a> (<span class="keywordtype">id</span>, <a class="code" href="boot__freertos_8c.html#1df1e0dd612db3618069ccdcf8b9341e">_irq_unexpected_handler</a>);
<a name="l00405"></a>00405 
<a name="l00406"></a>00406     <span class="comment">/* Remap SRAM if using RAM model.  */</span>
<a name="l00407"></a>00407     <a class="code" href="cpu_8h.html#2fce4754c55276f86960163dc26b86f9">cpu_sram_remap</a> ();
<a name="l00408"></a>00408 <span class="preprocessor">#endif</span>
<a name="l00409"></a>00409 <span class="preprocessor"></span>}
<a name="l00410"></a>00410 
<a name="l00411"></a>00411 
<a name="l00412"></a>00412 <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span>
<a name="l00413"></a><a class="code" href="cpu_8h.html#e3bf64ee167aebcec01f2c76eeb056b2">00413</a> <a class="code" href="cpu_8h.html#e3bf64ee167aebcec01f2c76eeb056b2">cpu_sleep</a> (<span class="keywordtype">void</span>)
<a name="l00414"></a>00414 {
<a name="l00415"></a>00415     <span class="comment">/* Turn off main oscillator.  */</span>
<a name="l00416"></a>00416 <span class="comment">//    AT91C_BASE_PMC-&gt;PMC_MOR &amp;= ~AT91C_CKGR_MOSCEN;</span>
<a name="l00417"></a>00417 
<a name="l00418"></a>00418     <span class="comment">/* Wait for interrupt.  */</span>
<a name="l00419"></a>00419     <a class="code" href="cpu_8h.html#a8cc514a5cebd91bd86deb4db7c49572">cpu_idle</a> ();
<a name="l00420"></a>00420 }
<a name="l00421"></a>00421 
<a name="l00422"></a>00422 
<a name="l00423"></a>00423 <span class="preprocessor">#endif </span><span class="comment">/* CPU_H  */</span>
</pre></div></div>
<hr size="1"><address style="text-align: right;"><small>Generated on Tue Mar 25 14:38:22 2008 for mmculib by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.5 </small></address>
</body>
</html>
