ARM GAS  crt.s 			page 1


   1              	/* ************************************************************************************************
   2              	/*   											crt.s	                                                  */
   3              	/*                                                                                                 
   4              	/*                       Assembly Language Startup Code for Atmel AT91SAM7S256                     
   5              	/*                                                                                                 
   6              	/*                                                                                           			  *
   7              	/*                                                                                                 
   8              	/*                                                                                                 
   9              	/* Author:  James P Lynch      September 2, 2006                                                   
  10              	/*                             May 12, 2007                                                        
  11              	/*          Wolfgang Wieser    07/2007                                                             
  12              	/* ************************************************************************************************
  13              	
  14              	/* Stack Sizes */
  15              	.set  UND_STACK_SIZE, 0x00000010		/* stack for "undefined instruction" interrupts is 16 bytes 	 */
  16              	.set  ABT_STACK_SIZE, 0x00000010		/* stack for "abort" interrupts is 16 bytes                 	 */
  17              	.set  FIQ_STACK_SIZE, 0x00000080		/* stack for "FIQ" interrupts  is 128 bytes     				 */
  18              	.set  IRQ_STACK_SIZE, 0x00000080		/* stack for "IRQ" normal interrupts is 128 bytes  				 */
  19              	.set  SVC_STACK_SIZE, 0x00000080		/* stack for "SVC" supervisor mode is 128 bytes  				 */
  20              	
  21              	/* Standard definitions of Mode bits and Interrupt (I & F) flags in PSRs (program status registers)
  22              	.set  ARM_MODE_USR, 0x10            	/* Normal User Mode 											 */
  23              	.set  ARM_MODE_FIQ, 0x11           		/* FIQ Processing Fast Interrupts Mode 							 */
  24              	.set  ARM_MODE_IRQ, 0x12           		/* IRQ Processing Standard Interrupts Mode 						 */
  25              	.set  ARM_MODE_SVC, 0x13           		/* Supervisor Processing Software Interrupts Mode 				 */
  26              	.set  ARM_MODE_ABT, 0x17           		/* Abort Processing memory Faults Mode 							 */
  27              	.set  ARM_MODE_UND, 0x1B           		/* Undefined Processing Undefined Instructions Mode 			 */
  28              	.set  ARM_MODE_SYS, 0x1F           		/* System Running Priviledged Operating System Tasks  Mode		 *
  29              	.set  I_BIT, 0x80               		/* when I bit is set, IRQ is disabled (program status registers) 
  30              	.set  F_BIT, 0x40               		/* when F bit is set, FIQ is disabled (program status registers) 
  31              	
  32              	/* Addresses and offsets of AIC and PIO  */
  33              	.set  AT91C_BASE_AIC, 0xFFFFF000 		/* (AIC) Base Address                         */
  34              	.set  AT91C_PIOA_CODR, 0xFFFFF434		/* (PIO) Clear Output Data Register           */
  35              	.set  AT91C_AIC_IVR, 0xFFFFF100			/* (AIC) IRQ Interrupt Vector Register        */
  36              	.set  AT91C_AIC_FVR, 0xFFFFF104			/* (AIC) FIQ Interrupt Vector Register        */
  37              	.set  AIC_IVR, 256						/* IRQ Vector Register offset from base above */
  38              	.set  AIC_FVR, 260						/* FIQ Vector Register offset from base above */
  39              	.set  AIC_EOICR, 304					/* End of Interrupt Command Register          */
  40              	
  41              	/* identify all GLOBAL symbols  */
  42              	.global _vec_reset						
  43              	.global _vec_undef						
  44              	.global _vec_swi						
  45              	.global _vec_pabt						
  46              	.global _vec_dabt						
  47              	.global _vec_rsv						
  48              	.global _vec_irq						
  49              	.global _vec_fiq
  50              	.global AT91F_Irq_Handler
  51              	.global	AT91F_Fiq_Handler
  52              	.global	AT91F_Dabt_Handler
  53              	.global	AT91F_Pabt_Handler
  54              	.global	AT91F_Undef_Handler
  55              	
  56              	
  57              	/* GNU assembler controls  */
ARM GAS  crt.s 			page 2


  58              	.text									/* all assembler code that follows will go into .text section	 */
  59              	.arm									/* compile for 32-bit ARM instruction set						 */
  60              	.align									/* align section on 32-bit boundary								 */
  61              	
  62              	/* ============================================================ */
  63              	/* 						VECTOR TABLE     					 	*/
  64              	/*																*/
  65              	/*	Must be located in FLASH at address 0x00000000				*/
  66              	/*																*/
  67              	/*	Easy to do if this file crt.s is first in the list 			*/
  68              	/*	for the linker step in the makefile, e.g.					*/
  69              	/*																*/
  70              	/*	    $(LD) $(LFLAGS) -o main.out  crt.o main.o				*/
  71              	/*																*/
  72              	/* ============================================================ */
  73              	
  74 0000 090000EA 	_vec_reset:		b           _init_reset				/* RESET vector - must be at 0x00000000	*/
  75 0004 FEFFFFEA 	_vec_undef:		b           AT91F_Undef_Handler		/* Undefined Instruction vector			*/
  76 0008 FEFFFFEA 	_vec_swi:		b           _vec_swi				/* Software Interrupt vector			*/
  77 000c FEFFFFEA 	_vec_pabt:		b           AT91F_Pabt_Handler		/* Prefetch abort vector				*/
  78 0010 FEFFFFEA 	_vec_dabt:		b           AT91F_Dabt_Handler		/* Data abort vector					*/
  79 0014 0000A0E1 	_vec_rsv:		nop                     			/* Reserved vector						*/
  80 0018 FEFFFFEA 	_vec_irq:		b           AT91F_Irq_Handler		/* Interrupt Request (IRQ) vector		*/
  81              	_vec_fiq:		                         			/* Fast interrupt request (FIQ) vector	*/
  82              	
  83              	/* ======================================================================== */
  84              	/* Function: 			AT91F_Fiq_Handler	       			 				*/
  85              	/*                                                                        	*/
  86              	/* This FIQ_Handler supports non-nested FIQ interrupts (a FIQ interrupt 	*/
  87              	/* cannot itself be interrupted).											*/
  88              	/*	                                               							*/
  89              	/* The Fast Interrupt Vector Register (AIC_FVR) is read to clear the        */
  90              	/* interrupt.                                                             	*/
  91              	/*                                                                        	*/
  92              	/* This handler does actually nothing; you can insert custom functionality  */
  93              	/* below.                                                                   */
  94              	/*                                                                          */
  95              	/* Programmer: James P Lynch												*/
  96              	/* ======================================================================== */
  97              	AT91F_Fiq_Handler:
  98              	
  99              	/* Adjust LR_irq */
 100 001c 04E04EE2 					sub		lr, lr, #4
 101              	
 102              	/* Read the AIC Fast Interrupt Vector register to clear the interrupt */
 103 0020 E4C09FE5 					ldr		r12, =AT91C_AIC_FVR
 104 0024 00B09CE5 					ldr		r11, [r12]
 105              					
 106              	/* Insert any custom functionality here. */
 107              	/*				ldr		r12, =AT91C_PIOA_CODR
 108              					mov		r11, #0x04
 109              					str		r11, [r12]*/
 110              	
 111              	/* Return from Fiq interrupt */
 112 0028 0EF0B0E1 					movs	pc, lr
 113              	
 114              	
ARM GAS  crt.s 			page 3


 115              	/* ======================================================================== */
 116              	/* 				  _init_reset Handler                                       */
 117              	/*																            */
 118              	/*	 RESET vector 0x00000000 branches to here.                              */
 119              	/*	                                                                        */
 120              	/*	 ARM microprocessor begins execution after RESET at address 0x00000000	*/ 
 121              	/*   in Supervisor mode with interrupts disabled!							*/
 122              	/*	                                                                        */
 123              	/*	 _init_reset handler:  creates a stack for each ARM mode.               */
 124              	/*	                       sets up a stack pointer for each ARM mode.       */
 125              	/*	                       turns off interrupts in each mode.               */
 126              	/*						   leaves CPU in SYS (System) mode.                 */
 127              	/*	                                                   			            */
 128              	/*	                       block copies the initializers to .data section   */
 129              	/*						   clears the .bss section to zero	                */
 130              	/*	                                             				            */
 131              	/*						   branches to main( ) 					            */
 132              	/* ======================================================================== */
 133              	.text			/* all assembler code that follows will go into .text section	 */
 134              	.align			/* align section on 32-bit boundary								 */
 135              	_init_reset: 
 136              					/* Setup a stack for each mode with interrupts initially disabled. */
 137 002c DC009FE5 	    			ldr	  r0, =_stack_end					/* r0 = top-of-stack  */
 138              	    			
 139 0030 DBF021E3 	    			msr   CPSR_c, #ARM_MODE_UND|I_BIT|F_BIT	/* switch to Undefined Instruction Mode  */
 140 0034 00D0A0E1 	    			mov   sp, r0							/* set stack pointer for UND mode  */
 141 0038 100040E2 	    			sub   r0, r0, #UND_STACK_SIZE			/* adjust r0 past UND stack  */
 142              	    			
 143 003c D7F021E3 	    			msr   CPSR_c, #ARM_MODE_ABT|I_BIT|F_BIT	/* switch to Abort Mode */
 144 0040 00D0A0E1 	    			mov   sp, r0							/* set stack pointer for ABT mode  */
 145 0044 100040E2 	    			sub   r0, r0, #ABT_STACK_SIZE			/* adjust r0 past ABT stack  */
 146              	    			
 147 0048 D1F021E3 	    			msr   CPSR_c, #ARM_MODE_FIQ|I_BIT|F_BIT	/* switch to FIQ Mode */
 148 004c 00D0A0E1 	    			mov   sp, r0							/* set stack pointer for FIQ mode  */	
 149 0050 800040E2 	   				sub   r0, r0, #FIQ_STACK_SIZE			/* adjust r0 past FIQ stack  */
 150              	   				
 151 0054 D2F021E3 	    			msr   CPSR_c, #ARM_MODE_IRQ|I_BIT|F_BIT	/* switch to IRQ Mode */
 152 0058 00D0A0E1 	    			mov   sp, r0							/* set stack pointer for IRQ mode  */
 153 005c 800040E2 	    			sub   r0, r0, #IRQ_STACK_SIZE			/* adjust r0 past IRQ stack  */
 154              	    			
 155 0060 D3F021E3 	    			msr   CPSR_c, #ARM_MODE_SVC|I_BIT|F_BIT	/* switch to Supervisor Mode */
 156 0064 00D0A0E1 	    			mov   sp, r0							/* set stack pointer for SVC mode  */
 157 0068 800040E2 	    			sub   r0, r0, #SVC_STACK_SIZE			/* adjust r0 past SVC stack  */
 158              	    			
 159 006c DFF021E3 	    			msr   CPSR_c, #ARM_MODE_SYS|I_BIT|F_BIT	/* switch to System Mode */
 160 0070 00D0A0E1 	    			mov   sp, r0							/* set stack pointer for SYS mode  */
 161              	    													/* we now start execution in SYSTEM mode */
 162              	    													/* This is exactly like USER mode (same stack) */
 163              	    													/* but SYSTEM mode has more privileges */
 164              	
 165              					/* copy initialized variables .data section  (Copy from ROM to RAM) */
 166 0074 98109FE5 	                ldr     R1, =_etext
 167 0078 98209FE5 	                ldr     R2, =_data
 168 007c 98309FE5 	                ldr     R3, =_edata
 169 0080 030052E1 	1:        		cmp     R2, R3
 170 0084 04009134 	                ldrlo   R0, [R1], #4
 171 0088 04008234 	                strlo   R0, [R2], #4
ARM GAS  crt.s 			page 4


 172 008c FBFFFF3A 	                blo     1b
 173              	
 174              					/* Clear uninitialized variables .bss section (Zero init)  */
 175 0090 0000A0E3 	                mov     R0, #0
 176 0094 84109FE5 	                ldr     R1, =_bss_start
 177 0098 84209FE5 	                ldr     R2, =_bss_end
 178 009c 020051E1 	2:				cmp     R1, R2
 179 00a0 04008134 	                strlo   R0, [R1], #4
 180 00a4 FCFFFF3A 	                blo     2b
 181              	
 182              					/* Enter the C code  */
 183 00a8 FEFFFFEA 	                b       main
 184              	
 185              	
 186              	
 187              	
 188              	/* ======================================================================== */
 189              	/* Function: 			AT91F_Irq_Handler	       			 				*/
 190              	/*																			*/
 191              	/* This IRQ_Handler supports nested interrupts (an IRQ interrupt can itself	*/
 192              	/* be interrupted by an interrupt with higher level).						*/
 193              	/*	                                               							*/
 194              	/* This handler re-enables interrupts and switches to "Supervisor" mode to  */
 195              	/* prevent any corruption to the link and IP registers.						*/
 196              	/*	                                               							*/
 197              	/* The Interrupt Vector Register (AIC_IVR) is read to determine the address */
 198              	/* of the required interrupt service routine. The ISR routine can be a 		*/
 199              	/* standard C function since this handler minds all the save/restore 		*/
 200              	/* protocols.																*/
 201              	/*																			*/
 202              	/*																			*/
 203              	/* Programmers:																*/
 204              	/*--------------------------------------------------------------------------*/
 205              	/*         ATMEL Microcontroller Software Support  -  ROUSSET  -            */
 206              	/*--------------------------------------------------------------------------*/
 207              	/* DISCLAIMER:  THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS  */
 208              	/* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED        */
 209              	/* WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND      */
 210              	/* NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR   */
 211              	/* ANY DIRECT, INDIRECT,    INCIDENTAL, SPECIAL, EXEMPLARY, OR              */
 212              	/* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT    LIMITED TO, PROCUREMENT     */
 213              	/* OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,    OR PROFITS; OR    */
 214              	/* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF    LIABILITY, */
 215              	/* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING    NEGLIGENCE  */
 216              	/* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,        */
 217              	/* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                       */
 218              	/* File source          : Cstartup.s79                                      */
 219              	/* Object               : Generic CStartup to AT91SAM7S256                  */
 220              	/* 1.0 09/May/06 JPP    : Creation                                          */
 221              	/*                                                                          */ 
 222              	/*																			*/
 223              	/* Note: taken from Atmel web site (www.at91.com)                           */
 224              	/*		 Keil example project:  AT91SAM7S-Interrupt_SAM7S                   */
 225              	/* ======================================================================== */
 226              	AT91F_Irq_Handler:
 227              	
 228              	/* Manage Exception Entry  				*/
ARM GAS  crt.s 			page 5


 229              	/* Adjust and save LR_irq in IRQ stack  */
 230 00ac 04E04EE2 					sub			lr, lr, #4
 231 00b0 00402DE9 					stmfd		sp!, {lr}
 232              	
 233              	/* Save r0 and SPSR (need to be saved for nested interrupt)  */
 234 00b4 00E04FE1 					mrs			r14, SPSR
 235 00b8 01402DE9 					stmfd		sp!, {r0,r14}
 236              	
 237              	/* Write in the IVR to support Protect Mode  				*/
 238              	/* No effect in Normal Mode  								*/
 239              	/* De-assert the NIRQ and clear the source in Protect Mode  */
 240 00bc 64E09FE5 					ldr			r14, =AT91C_BASE_AIC
 241 00c0 00019EE5 					ldr			r0 , [r14, #AIC_IVR]
 242 00c4 00E18EE5 					str			r14, [r14, #AIC_IVR]
 243              	
 244              	/* Enable Interrupt and Switch in Supervisor Mode  */
 245 00c8 13F021E3 					msr			CPSR_c, #ARM_MODE_SVC
 246              	
 247              	/* Save scratch/used registers and LR in User Stack  */
 248 00cc 0E502DE9 					stmfd		sp!, { r1-r3, r12, r14}
 249              	
 250              	/* Branch to the routine pointed by the AIC_IVR  */
 251 00d0 0FE0A0E1 					mov			r14, pc
 252 00d4 10FF2FE1 					bx			r0
 253              	
 254              	/* Manage Exception Exit  								  */
 255              	/* Restore scratch/used registers and LR from User Stack  */
 256 00d8 0E50BDE8 					ldmia		sp!, { r1-r3, r12, r14}
 257              	
 258              	/* Disable Interrupt and switch back in IRQ mode  */
 259 00dc 92F021E3 					msr			CPSR_c, #I_BIT | ARM_MODE_IRQ
 260              	
 261              	/* Mark the End of Interrupt on the AIC  */
 262 00e0 40E09FE5 					ldr			r14, =AT91C_BASE_AIC
 263 00e4 30E18EE5 					str			r14, [r14, #AIC_EOICR]
 264              	
 265              	/* Restore SPSR_irq and r0 from IRQ stack  */
 266 00e8 0140BDE8 					ldmia		sp!, {r0,r14}
 267 00ec 0EF06FE1 					msr			SPSR_cxsf, r14
 268              	
 269              	/* Restore adjusted  LR_irq from IRQ stack directly in the PC  */
 270 00f0 0080FDE8 					ldmia		sp!, {pc}^
 271              	
 272              	
 273              	/* ======================================================================== */
 274              	/* Function: 			AT91F_Undef_Handler	       			 				*/
 275              	/*																			*/
 276              	/* Entered on Undefined Instruction exception.         						*/
 277              	/* Enters blink routine  (2 blinks followed by a pause)                		*/
 278              	/* processor hangs in the blink loop forever								*/
 279              	/*																			*/
 280              	/* ======================================================================== */
 281 00f4 0400A0E3 	AT91F_Undef_Handler:		mov     R0, #4
 282 00f8 FEFFFFEA 								b 		PanicBlinker			
 283              	
 284              	
 285              	/* ======================================================================== */
ARM GAS  crt.s 			page 6


 286              	/* Function: 			AT91F_Pabt_Handler	       			 				*/
 287              	/*																			*/
 288              	/* Entered on Prefetch Abort exception.                						*/
 289              	/* Enters blink routine  (3 blinks followed by a pause)                		*/
 290              	/* processor hangs in the blink loop forever								*/
 291              	/*																			*/
 292              	/* ======================================================================== */
 293 00fc 0200A0E3 	AT91F_Pabt_Handler:			mov     R0, #2
 294 0100 FEFFFFEA 								b 		PanicBlinker			
 295              								
 296              											
 297              	/* ======================================================================== */
 298              	/* Function: 			AT91F_Dabt_Handler	       			 				*/
 299              	/*																			*/
 300              	/* Entered on Data Abort exception.                    						*/
 301              	/* Enters blink routine  (4 blinks followed by a pause)                		*/
 302              	/* processor hangs in the blink loop forever								*/
 303              	/*																			*/
 304              	/* ======================================================================== */
 305 0104 0300A0E3 	AT91F_Dabt_Handler:			mov     R0, #3
 306 0108 FEFFFFEA 								b 		PanicBlinker
 307              	
 308 010c 04F1FFFF 	.end
 308      00000000 
 308      00000000 
 308      00000000 
 308      00000000 
ARM GAS  crt.s 			page 7


DEFINED SYMBOLS
               crt.s:15     *ABS*:00000010 UND_STACK_SIZE
               crt.s:16     *ABS*:00000010 ABT_STACK_SIZE
               crt.s:17     *ABS*:00000080 FIQ_STACK_SIZE
               crt.s:18     *ABS*:00000080 IRQ_STACK_SIZE
               crt.s:19     *ABS*:00000080 SVC_STACK_SIZE
               crt.s:22     *ABS*:00000010 ARM_MODE_USR
               crt.s:23     *ABS*:00000011 ARM_MODE_FIQ
               crt.s:24     *ABS*:00000012 ARM_MODE_IRQ
               crt.s:25     *ABS*:00000013 ARM_MODE_SVC
               crt.s:26     *ABS*:00000017 ARM_MODE_ABT
               crt.s:27     *ABS*:0000001b ARM_MODE_UND
               crt.s:28     *ABS*:0000001f ARM_MODE_SYS
               crt.s:29     *ABS*:00000080 I_BIT
               crt.s:30     *ABS*:00000040 F_BIT
               crt.s:33     *ABS*:fffff000 AT91C_BASE_AIC
               crt.s:34     *ABS*:fffff434 AT91C_PIOA_CODR
               crt.s:35     *ABS*:fffff100 AT91C_AIC_IVR
               crt.s:36     *ABS*:fffff104 AT91C_AIC_FVR
               crt.s:37     *ABS*:00000100 AIC_IVR
               crt.s:38     *ABS*:00000104 AIC_FVR
               crt.s:39     *ABS*:00000130 AIC_EOICR
               crt.s:74     .text:00000000 _vec_reset
               crt.s:75     .text:00000004 _vec_undef
               crt.s:76     .text:00000008 _vec_swi
               crt.s:77     .text:0000000c _vec_pabt
               crt.s:78     .text:00000010 _vec_dabt
               crt.s:79     .text:00000014 _vec_rsv
               crt.s:80     .text:00000018 _vec_irq
               crt.s:81     .text:0000001c _vec_fiq
               crt.s:226    .text:000000ac AT91F_Irq_Handler
               crt.s:97     .text:0000001c AT91F_Fiq_Handler
               crt.s:305    .text:00000104 AT91F_Dabt_Handler
               crt.s:293    .text:000000fc AT91F_Pabt_Handler
               crt.s:281    .text:000000f4 AT91F_Undef_Handler
               crt.s:60     .text:00000000 $a
               crt.s:135    .text:0000002c _init_reset
               crt.s:308    .text:0000010c $d

UNDEFINED SYMBOLS
_stack_end
_etext
_data
_edata
_bss_start
_bss_end
main
PanicBlinker
