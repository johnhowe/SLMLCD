ARM GAS  /tmp/ccU9ca2c.s 			page 1


   1              	# 1 "Cstartup.s"
   1              	/*------------------------------------------------------------------------------
   1              	...
   0              	
   0              	
   2              	//*-         ATMEL Microcontroller Software Support  -  ROUSSET  -
   3              	//*------------------------------------------------------------------------------
   4              	//* The software is delivered "AS IS" without warranty or condition of any
   5              	//* kind, either express, implied or statutory. This includes without
   6              	//* limitation any warranty or condition with respect to merchantability or
   7              	//* fitness for any particular purpose, or against the infringements of
   8              	//* intellectual property rights of others.
   9              	//*-----------------------------------------------------------------------------
  10              	//*- File source          : Cstartup.s
  11              	//*- Object               : Generic CStartup for KEIL and GCC No Use REMAP
  12              	//*- Compilation flag     : None
  13              	//*-
  14              	//*- 1.0 10/Mar/05 JPP    : Creation
  15              	//*- 1.1 01/Apr/05 JPP    : save SPSR 
  16              	//*-----------------------------------------------------------------------------*/
  17              	
  18              	     .equ   IRQ_Stack_Size,     0x00000060
  19              	
  20              	/* #include "AT91SAM7S256_inc.h"	  */
  21              	
  22              		.equ AIC_IVR,         (256) 
  23              		.equ AIC_FVR,         (260) 
  24              		.equ AIC_EOICR,       (304)
  25              		.equ AT91C_BASE_AIC,  (0xFFFFF000)
  26              	
  27              	#;------------------------------------------------------------------------------
  28              	#;- Section Definition
  29              	#;-----------------
  30              	#;-  Section    
  31              	#;- .internal_ram_top 	Top_Stack: used by the cstartup for vector initalisation 
  32              	#;-			management defined by ld and affect from ldscript 
  33              	#;------------------------------------------------------------------------------
  34              		.section 	.internal_ram_top
  35              		.code 32
  36              		.align 	0
  37              		.global	Top_Stack
  38              	Top_Stack:
  39              		
  40              	/*------------------------------------------------------------------------------
  41              	*- Area Definition
  42              	*------------------------------------------------------------------------------
  43              	* .text is used instead of .section .text so it works with arm-aout too.  */
  44              	        .section 	.reset
  45              	        .text
  46              	        .global _startup
  47              	        .func   _startup
  48              	_startup:
  49              	reset: 
  50              	/*------------------------------------------------------------------------------
  51              	//*- Exception vectors 
  52              	//*--------------------
  53              	//*- These vectors can be read at address 0 or at RAM address
ARM GAS  /tmp/ccU9ca2c.s 			page 2


  54              	//*- They ABSOLUTELY requires to be in relative addresssing mode in order to
  55              	//*- guarantee a valid jump. For the moment, all are just looping.
  56              	//*- If an exception occurs before remap, this would result in an infinite loop.
  57              	//*- To ensure if a exeption occurs before start application to infinite loop.
  58              	//*------------------------------------------------------------------------------*/
  59              	
  60 0000 100000EA 	                B           InitReset           /* 0x00 Reset handler */
  61              	undefvec:
  62 0004 FEFFFFEA 	                B           undefvec            /* 0x04 Undefined Instruction */
  63              	swivec:
  64 0008 FEFFFFEA 	                B           swivec              /* 0x08 Software Interrupt */
  65              	pabtvec:
  66 000c FEFFFFEA 	                B           pabtvec             /* 0x0C Prefetch Abort */
  67              	dabtvec:
  68 0010 FEFFFFEA 	                B           dabtvec             /* 0x10 Data Abort */
  69              	rsvdvec:
  70 0014 FEFFFFEA 	                B           rsvdvec             /* 0x14 reserved  */
  71              	irqvec:
  72 0018 FEFFFFEA 	                B           IRQ_Handler_Entry   /* 0x18 IRQ	 */
  73              	fiqvec:               			            	/* 0x1c FIQ	*/
  74              	/*------------------------------------------------------------------------------
  75              	//*- Function             : FIQ_Handler_Entry
  76              	//*- Treatments           : FIQ Controller Interrupt Handler.
  77              	//*- Called Functions     : AIC_FVR[interrupt] 
  78              	//*------------------------------------------------------------------------------*/
  79              	
  80              	FIQ_Handler_Entry:
  81              	
  82              	/*- Switch in SVC/User Mode to allow User Stack access for C code 	*/
  83              	/* because the FIQ is not yet acknowledged*/
  84              	
  85              	/*- Save and r0 in FIQ_Register */
  86 001c 0090A0E1 	            mov         r9,r0
  87 0020 040198E5 		        ldr         r0 , [r8, #AIC_FVR]
  88 0024 D3F021E3 	            msr         CPSR_c,#I_BIT | F_BIT | ARM_MODE_SVC
  89              	
  90              	/*- Save scratch/used registers and LR in User Stack */
  91 0028 0E502DE9 	            stmfd       sp!, { r1-r3, r12, lr}
  92              	
  93              	/*- Branch to the routine pointed by the AIC_FVR */
  94 002c 0FE0A0E1 	            mov         r14, pc
  95 0030 10FF2FE1 	            bx          r0
  96              	
  97              	/*- Restore scratch/used registers and LR from User Stack */
  98 0034 0E50BDE8 	            ldmia       sp!, { r1-r3, r12, lr}
  99              	
 100              	/*- Leave Interrupts disabled and switch back in FIQ mode */
 101 0038 D1F021E3 	            msr         CPSR_c, #I_BIT | F_BIT | ARM_MODE_FIQ
 102              	
 103              	/*- Restore the R0 ARM_MODE_SVC register */
 104 003c 0900A0E1 	            mov         r0,r9
 105              	
 106              	/*- Restore the Program Counter using the LR_fiq directly in the PC */
 107 0040 04F05EE2 	            subs        pc,lr,#4
 108              		.align 0
 109              	.RAM_TOP:
 110 0044 00000000 		.word	Top_Stack
ARM GAS  /tmp/ccU9ca2c.s 			page 3


 111              	
 112              	InitReset:
 113              	/*------------------------------------------------------------------------------
 114              	/*- Low level Init (PMC, AIC, ? ....) by C function AT91F_LowLevelInit
 115              	/*------------------------------------------------------------------------------*/
 116              	            	.extern   AT91F_LowLevelInit
 117              	/*- minumum C initialization */
 118              	/*- call  AT91F_LowLevelInit( void) */
 119              	
 120 0048 0CD01FE5 	            ldr     r13,.RAM_TOP            /* temporary stack in internal RAM */
 121              	/*--Call Low level init function in ABSOLUTE through the Interworking	*/
 122 004c C4009FE5 		        ldr	    r0,=AT91F_LowLevelInit
 123 0050 0FE0A0E1 	            mov     lr, pc
 124 0054 10FF2FE1 		        bx	    r0
 125              	/*------------------------------------------------------------------------------
 126              	//*- Stack Sizes Definition
 127              	//*------------------------
 128              	//*- Interrupt Stack requires 2 words x 8 priority level x 4 bytes when using
 129              	//*- the vectoring. This assume that the IRQ management.
 130              	//*- The Interrupt Stack must be adjusted depending on the interrupt handlers.
 131              	//*- Fast Interrupt not requires stack If in your application it required you must
 132              	//*- be definehere.
 133              	//*- The System stack size is not defined and is limited by the free internal
 134              	//*- SRAM.
 135              	//*------------------------------------------------------------------------------*/
 136              	
 137              	/*------------------------------------------------------------------------------
 138              	//*- Top of Stack Definition
 139              	//*-------------------------
 140              	//*- Interrupt and Supervisor Stack are located at the top of internal memory in 
 141              	//*- order to speed the exception handling context saving and restoring.
 142              	//*- ARM_MODE_SVC (Application, C) Stack is located at the top of the external memory.
 143              	//*------------------------------------------------------------------------------*/
 144              	
 145              		  .EQU		IRQ_STACK_SIZE,    (3*8*4)
 146              	          .EQU		ARM_MODE_FIQ,       0x11
 147              	          .EQU		ARM_MODE_IRQ,       0x12
 148              	          .EQU		ARM_MODE_SVC,       0x13
 149              	
 150              	          .EQU		I_BIT,              0x80
 151              	          .EQU		F_BIT,              0x40
 152              	
 153              	/*------------------------------------------------------------------------------
 154              	//*- Setup the stack for each mode
 155              	//*-------------------------------*/
 156 0058 0D00A0E1 	                mov     r0,r13
 157              	
 158              	/*- Set up Fast Interrupt Mode and set FIQ Mode Stack*/
 159 005c D1F021E3 	                msr     CPSR_c, #ARM_MODE_FIQ | I_BIT | F_BIT
 160              	/*- Init the FIQ register*/
 161 0060 B4809FE5 	            	ldr     r8, =AT91C_BASE_AIC
 162              	
 163              	/*- Set up Interrupt Mode and set IRQ Mode Stack*/
 164 0064 D2F021E3 	                msr     CPSR_c, #ARM_MODE_IRQ | I_BIT | F_BIT
 165 0068 00D0A0E1 	                mov     r13, r0                     /* Init stack IRQ */
 166 006c 600040E2 	                sub     r0, r0, #IRQ_Stack_Size
 167              	/*- Set up Supervisor Mode and set Supervisor Mode Stack*/
ARM GAS  /tmp/ccU9ca2c.s 			page 4


 168 0070 13F021E3 	                msr     CPSR_c, #ARM_MODE_SVC
 169 0074 00D0A0E1 	                mov     r13, r0                     /* Init stack Sup */
 170              	
 171              	/*- Enable interrupt & Set up Supervisor Mode and set Supervisor Mode Stack*/
 172              	
 173              	# Relocate .data section (Copy from ROM to RAM)
 174 0078 A0109FE5 	                LDR     R1, =_etext
 175 007c A0209FE5 	                LDR     R2, =_data
 176 0080 A0309FE5 	                LDR     R3, =_edata
 177 0084 030052E1 	LoopRel:        CMP     R2, R3
 178 0088 04009134 	                LDRLO   R0, [R1], #4
 179 008c 04008234 	                STRLO   R0, [R2], #4
 180 0090 FBFFFF3A 	                BLO     LoopRel
 181              	
 182              	# Clear .bss section (Zero init)
 183 0094 0000A0E3 	                MOV     R0, #0
 184 0098 8C109FE5 	                LDR     R1, =__bss_start__
 185 009c 8C209FE5 	                LDR     R2, =__bss_end__
 186 00a0 020051E1 	LoopZI:         CMP     R1, R2
 187 00a4 04008134 	                STRLO   R0, [R1], #4
 188 00a8 FCFFFF3A 	                BLO     LoopZI
 189              	
 190 00ac 80E09FE5 			ldr	lr,=exit
 191 00b0 80009FE5 			ldr	r0,=main
 192 00b4 10FF2FE1 			bx	r0
 193              	
 194              	        .size   _startup, . - _startup
 195              	        .endfunc
 196              			
 197              		
 198              	/* "exit" dummy added by mthomas to avoid sbrk write read etc. needed
 199              	   by the newlib default "exit" */
 200              	        .global exit
 201              	        .func   exit
 202              	exit:
 203 00b8 FEFFFFEA 	        b    .
 204              		.size   exit, . - exit
 205              	        .endfunc
 206              	
 207              	
 208              	
 209              	/*------------------------------------------------------------------------------
 210              	//*- Manage exception
 211              	//*---------------
 212              	//*- This module The exception must be ensure in ARM mode
 213              	//*------------------------------------------------------------------------------
 214              	//*------------------------------------------------------------------------------
 215              	//*- Function             : IRQ_Handler_Entry
 216              	//*- Treatments           : IRQ Controller Interrupt Handler.
 217              	//*- Called Functions     : AIC_IVR[interrupt] 
 218              	//*------------------------------------------------------------------------------*/
 219              	        .global IRQ_Handler_Entry
 220              	        .func   IRQ_Handler_Entry
 221              	
 222              	IRQ_Handler_Entry:
 223              	
 224              	/*- Manage Exception Entry  */
ARM GAS  /tmp/ccU9ca2c.s 			page 5


 225              	/*- Adjust and save LR_irq in IRQ stack  */
 226 00bc 04E04EE2 	            sub         lr, lr, #4
 227 00c0 00402DE9 	            stmfd       sp!, {lr}
 228              	
 229              	/*- Save SPSR need to be saved for nested interrupt */
 230 00c4 00E04FE1 	            mrs         r14, SPSR
 231 00c8 00402DE9 	            stmfd       sp!, {r14}
 232              	
 233              	/*- Save and r0 in IRQ stack  */
 234 00cc 01002DE9 	            stmfd       sp!, {r0}
 235              	
 236              	/*- Write in the IVR to support Protect Mode  */
 237              	/*- No effect in Normal Mode  */
 238              	/*- De-assert the NIRQ and clear the source in Protect Mode */
 239 00d0 44E09FE5 	            ldr         r14, =AT91C_BASE_AIC
 240 00d4 00019EE5 		    ldr         r0 , [r14, #AIC_IVR]
 241 00d8 00E18EE5 		    str         r14, [r14, #AIC_IVR]
 242              	
 243              	/*- Enable Interrupt and Switch in Supervisor Mode */
 244 00dc 13F021E3 	            msr         CPSR_c, #ARM_MODE_SVC
 245              	
 246              	/*- Save scratch/used registers and LR in User Stack */
 247 00e0 0E502DE9 	            stmfd       sp!, { r1-r3, r12, r14}
 248              	
 249              	/*- Branch to the routine pointed by the AIC_IVR  */
 250 00e4 0FE0A0E1 	            mov         r14, pc
 251 00e8 10FF2FE1 	            bx          r0
 252              	/*- Restore scratch/used registers and LR from User Stack*/
 253 00ec 0E50BDE8 	            ldmia       sp!, { r1-r3, r12, r14}
 254              	
 255              	/*- Disable Interrupt and switch back in IRQ mode */
 256 00f0 92F021E3 	            msr         CPSR_c, #I_BIT | ARM_MODE_IRQ
 257              	
 258              	/*- Mark the End of Interrupt on the AIC */
 259 00f4 20E09FE5 	            ldr         r14, =AT91C_BASE_AIC
 260 00f8 30E18EE5 	            str         r14, [r14, #AIC_EOICR]
 261              	
 262              	/*- Restore SPSR_irq and r0 from IRQ stack */
 263 00fc 0100BDE8 	            ldmia       sp!, {r0}
 264              	
 265              	/*- Restore SPSR_irq and r0 from IRQ stack */
 266 0100 0040BDE8 	            ldmia       sp!, {r14}
 267 0104 0EF06FE1 	            msr         SPSR_cxsf, r14
 268              	
 269              	/*- Restore adjusted  LR_irq from IRQ stack directly in the PC */
 270 0108 0080FDE8 	            ldmia       sp!, {pc}^
 271              		
 272              	        .size   IRQ_Handler_Entry, . - IRQ_Handler_Entry
 273              	        .endfunc
 274              	/*---------------------------------------------------------------
 275              	//* ?EXEPTION_VECTOR
 276              	//* This module is only linked if needed for closing files.
 277              	//*---------------------------------------------------------------*/
 278              	        .global AT91F_Default_FIQ_handler
 279              	        .func   AT91F_Default_FIQ_handler
 280              	AT91F_Default_FIQ_handler:
 281 010c FEFFFFEA 	            b     AT91F_Default_FIQ_handler
ARM GAS  /tmp/ccU9ca2c.s 			page 6


 282              	        .size   AT91F_Default_FIQ_handler, . - AT91F_Default_FIQ_handler
 283              	        .endfunc
 284              	
 285              	        .global AT91F_Default_IRQ_handler
 286              	        .func   AT91F_Default_IRQ_handler
 287              	AT91F_Default_IRQ_handler:
 288 0110 FEFFFFEA 	            b     AT91F_Default_IRQ_handler
 289              	        .size   AT91F_Default_IRQ_handler, . - AT91F_Default_IRQ_handler
 290              	        .endfunc
 291              	
 292              	        .global AT91F_Spurious_handler
 293              	        .func   AT91F_Spurious_handler
 294              	AT91F_Spurious_handler:
 295 0114 FEFFFFEA 	            b     AT91F_Spurious_handler
 296              	        .size   AT91F_Spurious_handler, . - AT91F_Spurious_handler
 297              	        .endfunc
 298              	
 299              	
 300 0118 00000000 	        .end
 300      00F0FFFF 
 300      00000000 
 300      00000000 
 300      00000000 
ARM GAS  /tmp/ccU9ca2c.s 			page 7


DEFINED SYMBOLS
          Cstartup.s:18     *ABS*:00000060 IRQ_Stack_Size
          Cstartup.s:22     *ABS*:00000100 AIC_IVR
          Cstartup.s:23     *ABS*:00000104 AIC_FVR
          Cstartup.s:24     *ABS*:00000130 AIC_EOICR
          Cstartup.s:25     *ABS*:fffff000 AT91C_BASE_AIC
          Cstartup.s:38     .internal_ram_top:00000000 Top_Stack
          Cstartup.s:48     .text:00000000 _startup
          Cstartup.s:49     .text:00000000 reset
          Cstartup.s:112    .text:00000048 InitReset
          Cstartup.s:60     .text:00000000 $a
          Cstartup.s:61     .text:00000004 undefvec
          Cstartup.s:63     .text:00000008 swivec
          Cstartup.s:65     .text:0000000c pabtvec
          Cstartup.s:67     .text:00000010 dabtvec
          Cstartup.s:69     .text:00000014 rsvdvec
          Cstartup.s:71     .text:00000018 irqvec
          Cstartup.s:222    .text:000000bc IRQ_Handler_Entry
          Cstartup.s:73     .text:0000001c fiqvec
          Cstartup.s:80     .text:0000001c FIQ_Handler_Entry
                            *ABS*:00000080 I_BIT
                            *ABS*:00000040 F_BIT
                            *ABS*:00000013 ARM_MODE_SVC
                            *ABS*:00000011 ARM_MODE_FIQ
          Cstartup.s:109    .text:00000044 .RAM_TOP
          Cstartup.s:110    .text:00000044 $d
          Cstartup.s:120    .text:00000048 $a
          Cstartup.s:145    *ABS*:00000060 IRQ_STACK_SIZE
          Cstartup.s:147    *ABS*:00000012 ARM_MODE_IRQ
          Cstartup.s:177    .text:00000084 LoopRel
          Cstartup.s:186    .text:000000a0 LoopZI
          Cstartup.s:202    .text:000000b8 exit
          Cstartup.s:280    .text:0000010c AT91F_Default_FIQ_handler
          Cstartup.s:287    .text:00000110 AT91F_Default_IRQ_handler
          Cstartup.s:294    .text:00000114 AT91F_Spurious_handler
          Cstartup.s:300    .text:00000118 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
AT91F_LowLevelInit
_etext
_data
_edata
__bss_start__
__bss_end__
main
